var documenterSearchIndex = {"docs":
[{"location":"RclCircuits/#RCL-Ladder-Network","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"","category":"section"},{"location":"RclCircuits/#Description","page":"RCL Ladder Network","title":"Description","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"This benchmark creates linear, time-invariant pH-DAE models for simple electric circuits consisting of ideal voltage sources, resistors, inductors and capacitors. The modelling of such circuits is descibed in Freund2011.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"(Image: Mass-spring-damper chain system)","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"Modeling of such electric circuits with directed graphs leads to systems of the following form:","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"beginaligned\r\nE dotx(t) = (J-R)x(t) + Gu(t) \r\ny(t) = G^mathsfT x(t)\r\nendaligned","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"where","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"beginequation*\r\n\tE = beginbmatrix mathcalA_c C mathcalA_c^mathsfT  0  0  0  L  0  0  0  0 endbmatrix  J = beginbmatrix 0  -mathcalA_l  -mathcalA_v  mathcalA_l^mathsfT  0  0  mathcalA_v^mathsfT  0  0 endbmatrix R = beginbmatrix mathcalA_r R^-1mathcalA_r^mathsfT  0  0  0  0  0  0  0  0 endbmatrix G = beginbmatrix 0  0  -I_m endbmatrix\t\r\nendequation*","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"Here, the matrices RLC are positive definite diagonal matrices that contain the resistances, inductances and capacitances, respectively, as entries. The incidence matrices mathcalA_rmathcalA_lmathcalA_cmathcalA_v follow directly from the directed graph of the network and contain only entries in -101. The inputs u(t) of the system are the voltages v_v(t) provided by the voltage sources and the outputs are the negative currents i_v(t) through the voltage sources. The state vector is given by x(t) = beginbmatrix\tv(t)^mathsfT  i_l(t)^mathsfT  i_v(t)^mathsfT endbmatrix^mathsfT with node voltages v(t) and inductor currents i_l(t). Consequently, the dimension of the model is given by n = 3widetilden + 2m, where widetilden denotes the number of loops in the system and m is the number of voltage sources. Since mathcalA_c C mathcalA_c^mathsfT is diagonal for the circuit in Figure 1, a transformation of the model to semi-explicit form is straightforward. The benchmark allows for different configurations of the network that will change the index of the resulting pH-DAE model and its number of inputs and outputs. ","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"SISO/MIMO: In the multiple-input multiple-output (MIMO) version, the inputs are the voltages of both voltage sources and the outputs are the currents as shown in Figure 1. In the single-input single-output (SISO) configuration, we replace the second voltage source by a wire and only consider the input-to-output behaviour from u_1(cdot) to y_1(cdot).\nIndex 1/Index 2: The differentiation index of the system depends on the electrical component that is placed at the position of the red box in Figure 1. A resistor leads to pH-DAEs with index 1 and a capacitor is used in the index 2 case which leads to improper transfer functions.","category":"page"},{"location":"RclCircuits/#Parameters","page":"RCL Ladder Network","title":"Parameters","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"The topology of the network and its characteristics may be changed via","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"The values for the resistances r, capacitances c and inductances l. If scalars are provided, the value will be applied to all components of the respective type. Parameters can be supplied to each component separately by providing vectors of suitable length.\nThe number widetilden of loops in the network.\nThe number of inputs (voltage sources) m.","category":"page"},{"location":"RclCircuits/#Interface","page":"RCL Ladder Network","title":"Interface","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"To obtain system matrices E J R and G use the following function call.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"using PortHamiltonianBenchmarkSystems\r\nE, J, R, G = setup_DAE1_RCL_LadderNetwork_sparse() # for standard parameters","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"To specify optional arguments, specify the parameters as named arguments.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"using PortHamiltonianBenchmarkSystems\r\nE, J, R, G = setup_DAE1_RCL_LadderNetwork_sparse(ns = 500, r = rand(502))","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"The transfer function can be defined as follows.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"using LinearAlgebra, PortHamiltonianBenchmarkSystems\r\nE, J, R, G = setup_DAE1_RCL_LadderNetwork_sparse()\r\nH(s) = G'*((s*E-(J-R))\\G)","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"setup_DAE1_RCL_LadderNetwork_sparse()\r\nsetup_DAE2_RCL_LadderNetwork_sparse()","category":"page"},{"location":"RclCircuits/#PortHamiltonianBenchmarkSystems.setup_DAE1_RCL_LadderNetwork_sparse-Tuple{}","page":"RCL Ladder Network","title":"PortHamiltonianBenchmarkSystems.setup_DAE1_RCL_LadderNetwork_sparse","text":"Description:   This demo provides a semi-explicit index-1 port-Hamiltonian DAE system   derived from a simple RCL ladder network with shunt resistor\n\nInput Arguments:\n\nns:           Number of loops in network\nr, c, l:      Resistances, capacitances and inductances vectors with length               ns+2 / ns-1 / ns\nm:            Number of inputs (1: SISO or 2: MIMO)\n\nOutput Arguments:\n\nE, J, R, Q, G:      Index-1 PH-DAE model of the RCL ladder network\n\nReferences:   R. W. Freund. Structure-Preserving Model Order Reduction of               RCL Circuit Equations, 2008.\n\nAuthor: Tim Moser   E-Mail: tim.moser@tum.de   Date:   2021/11/03\n\n\n\n\n\n","category":"method"},{"location":"RclCircuits/#PortHamiltonianBenchmarkSystems.setup_DAE2_RCL_LadderNetwork_sparse-Tuple{}","page":"RCL Ladder Network","title":"PortHamiltonianBenchmarkSystems.setup_DAE2_RCL_LadderNetwork_sparse","text":"Index 2 RCL Ladder Network\n\nDescription:   This demo provides a semi-explicit index-2 port-Hamiltonian DAE system   derived from a simple RCL ladder network with buffer capacitor\n\nInput Arguments:\n\nns:           Number of loops in network\nr, c, l:      Resistances, capacitances and inductances vectors with length ns+1 / ns / ns\nm:            Number of inputs (1: SISO or 2: MIMO)\n\nOutput Arguments:\n\nE, J, R, G:      Index-2 PH-DAE model of the RCL ladder network\n\nReferences:   R. W. Freund. Structure-Preserving Model Order Reduction of               RCL Circuit Equations, 2008.\n\nAuthor: Tim Moser   E-Mail: tim.moser@tum.de   Date:   2021/12/14\n\n\n\n\n\n","category":"method"},{"location":"RclCircuits/#References","page":"RCL Ladder Network","title":"References","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"@InCollection{Freund2011,\r\n  author    = {Roland W. Freund},\r\n  title     = {The {SPRIM} Algorithm for Structure-Preserving Order Reduction of General {RCL} Circuits},\r\n  booktitle = {Model Reduction for Circuit Simulation},\r\n  series \t= {Lect. Notes Electr. Eng.},\r\n  year      = {2011},\r\n  publisher = {Springer, Dordrecht},\r\n  volume \t= {74},\r\n  chapter \t= {2},\r\n  editor \t= {P. Benner and M. Hinze and E.~J.~W. ter Maten},\r\n  pages \t= {25--52},\r\n}","category":"page"},{"location":"PoroModel/#Poroelastic-Network-Model","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"","category":"section"},{"location":"PoroModel/#Description","page":"Poroelastic Network Model","title":"Description","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"This benchmark is the poroelastic network model presented in  AMU2021. The model is derived from Biot's consolidation model  for poroelastic elasticity. Let Omega subseteq mathbbR^d be a Lipschitz  domain with din23 and mathbbT = 0T for T in (0infty). Consider the system of coupled partial differential equations","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n rho fracpartial^2partial t^2 u(txi) - nabla sigma(u(txi)) + \n nabla (alpha p(txi)) = widehatf(txi) quad textin  (0T times \nOmega  \n fracpartialpartial t left( alpha nablacdot u(txi) + \n frac1M p(txi)right) - nabla cdot left( frackappanunabla \np(txi) right) = widehatg(txi) quad textin  (0T times Omega\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Here, the displacement field u mathbbT times Omega to R and the  pressure field p mathbbT times Omega to R are searched solution  functions. Moreover, the stress-strain constitute relation","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"sigma(u(txi)) = 2muvarepsilon(u(txi)) + \nlambda(nabla cdot u(txi)) mathcalI quad textwith quad \nvarepsilon(u(txi)) = frac12left( nabla u(txi) + (nabla u(txi))^mathsfT \nright)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"is satisfied, where","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"mu and lambda are the Lamé coefficients,\nmathcalI denotes the identity tensor,\nalpha is the Biot-Willes fluid solid coupling coefficient,\nM is the Biot modulus,\nkappa is the permeability,\nrho is the density,\nmu is the fluid viscosity,\nwidehatf (0T times Omega to R^d are the volume-distributed forces,\nwidehatg (0T times Omega to R is the external injection.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The PDE system is equipped with homogeneous Dirichlet boundary conditions","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" u(txi) = 0 quad p(txi) = 0 quad texton \n (0T times partial Omega","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"as well initial conditions p(0cdot) = p^0  partial Omega to R,  u(0cdot) = u^0  partial Omega to R^d, and fracpartialpartial  tu(0cdot) = dotu^0  partial Omega to R^d. Define the Hilbert spaces","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathcalV = leftH_0^1(Omega)right^dquad mathcalH_mathcalV = \nleftL^2(Omega)right^d quad mathcalQ = H_0^1(Omega)quad \nmathcalH_mathcalQ = L^2(Omega)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"and the operators","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\nmathcalY mathcalH_mathcalV to mathcalH_mathcalV^* quad leftlangle mathcalYuv rightrangle = int_Omega rho u \nvmathrmdxi \nmathcalM mathcalH_mathcalQ to mathcalH_mathcalQ^* \nquad leftlangle mathcalMpq rightrangle = int_Omega frac1M \npqmathrmdxi \nmathcalA mathcalV to mathcalV^* \nquad leftlangle mathcalAuv rightrangle = int_Omega \nsigma(u) varepsilon(v)mathrmdxi \nmathcalK mathcalQ to mathcalQ^* \nquad leftlangle mathcalKpq rightrangle = int_Omega \nfrackappanu nabla p cdot nabla qmathrmdxi \nmathcalD mathcalV to mathcalH_mathcalQ^* \nquad leftlangle mathcalDuq rightrangle = int_Omega alpha(nabla \ncdot u)q mathrmdxi\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Note that mathcalY, mathcalM, mathcalA, and mathcalK are  positive definite. To determine the weak form of the PDE, the first equation is  multiplied by a test function v in mathcalV while the second equation is  multiplied with q in mathcalQ. Further we introduce the linear forms","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" f(t) = int_Omega widehatf(t) cdot mathrmd xi in \nmathcalH_mathcalV^* quad \n g(t) = int_Omega widehatg(t) cdot mathrmd xi in \nmathcalH_mathcalQ^*","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Then for initial conditions p^0 in mathcalH_mathcalQ, u^0 in  mathcalV, and dotu^0 in mathcalH_mathcalV and right-hand  sides f in L^2(mathbbTmathcalH_mathcalV) and f in  L^2(mathbbTmathcalH_mathcalQ) one aims to find u in  L^2(mathbbTmathcalV) and p in  L^2(mathbbTmathcalQ) with dotu in  L^2(mathbbTmathcalH_mathcalV), ddotu in  L^2(mathbbTmathcalV^*), and dotp in  L^2(mathbbTmathcalQ^*) such that","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n mathcalY ddotu(t) + mathcalA dotu(t) - mathcalD^* u(t) = f(t) \nquad textin   mathcalV^* \nmathcalD dotu(t) + mathcalM dotp(t) + mathcalK p(t) = g(t) \nquad textin  mathcalQ^*\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"for almost all t in (0T), where mathcalD^* denotes the dual operator  of mathcalD. By introducing the auxiliary variable w = dotu, this  operator equation can be written in first-order form as","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" beginbmatrix\n mathcalY  0  0  0  mathcalA  0  0  0  mathcalM\n endbmatrix beginpmatrix dotw(t)  dotu(t)  dotp(t) \nendpmatrix = \n beginbmatrix\n 0  -mathcalA  mathcalD^*  mathcalA^*  0  0  -mathcalD  0 \n -mathcalK\n endbmatrix beginpmatrix w(t)  u(t)  p(t) endpmatrix + \nbeginpmatrix f(t)  0  g(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Writing the inhomogeneity as","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" beginpmatrix f(t)  0  g(t) endpmatrix = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix \nbeginpmatrix f(t)  g(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"and defining the output","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathbfy(t) = beginpmatrix w(t)  p(t) endpmatrix = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix \nbeginpmatrix w(t)  u(t)  p(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"we obtain the port-Hamiltonian system","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n mathcalE dotmathbfx(t) = (mathcalJ - mathcalR) mathbfx(t) + \nmathcalB   mathbfv(t) \n mathbfy(t) = mathcalB^* mathbfx(t)\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"with ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathcalE = beginbmatrix\n mathcalY  0  0  0  mathcalA  0  0  0  mathcalM\n endbmatrix quad mathcalJ = beginbmatrix\n 0  -mathcalA  mathcalD^*  mathcalA^*  0  0  -mathcalD  0 \n 0\n endbmatrix quad mathcalR = beginbmatrix\n 0  0  0  0  0  0  0  0 \n mathcalK\n endbmatrix quad mathcalB = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"where mathbfx(t) = leftbeginsmallmatrix w(t)  u(t)  p(t)  endsmallmatrixright and mathbfv(t) = leftbeginsmallmatrix f(t)   g(t) endsmallmatrixright. ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Discretizing this system with standard mathcalP_1 Lagrange finite elements  results in the finite-dimensional port-Hamiltonian system ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n E dotx(t) = (J - R) x(t) + Bv(t) \n         y(t) = B^mathsfT x(t)\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"with ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n E = beginbmatrix\n rho M_u  0  0  0  K_u(mulambda)  0  0  0  frac1M M_p\n endbmatrix quad J = beginbmatrix\n 0  -K_u(mulambda)  alpha D^mathsfT  K_u(mulambda)^mathsfT  0  0  \n-alpha D  0  0\n endbmatrix  R = beginbmatrix\n 0  0  0  0  0  0  0  0 \n frackappanu K_p\n endbmatrix quad mathcalB = beginbmatrix B_f  0  0  0  0  \nB_g endbmatrix\nendaligned","category":"page"},{"location":"PoroModel/#Parameters","page":"Poroelastic Network Model","title":"Parameters","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"For this benchmark, the domain Omega = 01^2 with d=2 has been chosen  and the volume-distributed forces widehatf and injection widehatg are  spatially independent resulting in two inputs, i.\\,e., B in R^n times m  with m = 2. Moreover, different discretization levels are available,   resulting in systems with state-space dimensions n=320, n = 980, and n =  1805. These discretizations have been obtained using the python  interface of FEniCS. The following fixed parameters have been chosen:","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"lambda = 12,\nmu = 6.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The following parameters are variable with the default values","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"rho = 10^-3,\nalpha = 079,\nfrac1M = 780cdot 10^3,\nfrackappanu = 63333.","category":"page"},{"location":"PoroModel/#Interface","page":"Poroelastic Network Model","title":"Interface","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The system matrices E J R and B can be generated by the following function call.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = poro_elasticity_model()","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The free parameters are given as named arguments. Note that n in  320 980 1805 .","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = poro_elasticity_model(n = 320, eta = 1e-3)\nH(s) = B'*((s*E-(J-R))\\B)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Here H is the transfer function.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"poro_elasticity_model","category":"page"},{"location":"PoroModel/#PortHamiltonianBenchmarkSystems.poro_elasticity_model","page":"Poroelastic Network Model","title":"PortHamiltonianBenchmarkSystems.poro_elasticity_model","text":"poro_elasticity_model(;     n = 980,     rho = 1e-3,     alpha = 0.79,     M = 1/7.80e3,     kappanu = 633.33,     eta = 1e-4,   )\n\nThis function returns a port-Hamiltonian model of linear poroelasticity in a bounded Lipschitz domain as described in     Altmann, Mehrmann, Unger: Port-Hamiltonian Formulations of Poroelastic     Network Models\n\nArguments\n\nn: System dimension (can only be either: 320, 980, or 1805). Default = 980.\nrho: density. Default = 1e-3.\nalpha: Biot-Willis fluid-solid coupling coefficient. Default = 0.79.\nbm: Biot-Modulus. Default = 1/7.8e3.\nkappanu: Quotient kappa/Nu, where kappa denotes the permeability and nu denotes the fluid viscosity. Default = 633.33.\neta: artificial damping coefficient. Default = 1e-4.\n\nOutputs\n\nE J R B, matrices to construct the transfer function H(s) = B^mathsfT(sE-(J-R))^-1B)\n\n\n\n\n\n","category":"function"},{"location":"PoroModel/#References","page":"Poroelastic Network Model","title":"References","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"@misc{AMU2021,\n      title={Port-{H}amiltonian formulations of poroelastic network models}, \n      author={R. Altmann and V. Mehrmann and B. Unger},\n      year={2021},\n      eprint={2012.01949},\n      archivePrefix={arXiv},\n      primaryClass={math.DS}\n}","category":"page"},{"location":"DampedWaveNet/#Damped-Wave-Net","page":"Damped Wave Net","title":"Damped Wave Net","text":"","category":"section"},{"location":"DampedWaveNet/#Description","page":"Damped Wave Net","title":"Description","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"gdefkett1mathnormal1","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"This benchmark is a model for wave propagation in gas pipeline networks, as presented in (EKLSMM2018). The network is modeled as directed, connected graph mathcalG(mathcalVmathcalE), with vertices vinmathcalV, edges einmathcalE and at least one boundary vertex vinmathcalV_bsubseteqmathcalV, connected to a single edge.","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"Graph Figure","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"On each edge, the following 1D damped wave equation holds, with presssure p_e (textkgtextm^-1texts^-2), mass flow m_e (textkgtexts^-1) and pipe constants a_e (texts^2), b_e (textm^-2), d_e (textm^-2texts^-1):","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\ta_epartial_tp_e = -partial_xm_e forall einmathcalE\n\tb_epartial_tm_e = -partial_xp_e-d_em_e forall einmathcalE\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"At each inner vertex vinmathcalV_iequivmathcalVsetminusmathcalV_b, the following pressure continuity and mass conservation conditions hold, where p_i_v is the pressure at v and n_e_v is the direction of edge e at v (+1: incoming, -1: outgoing):","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\tp_e_v equiv p_i_v forall einmathcalE(v) forall vinmathcalV_i\n\tsum_einmathcalE(v) n_e m_e_v = 0 forall vinmathcalV_i\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"At each boundary vertex, either a pressure or mass flow must be fixed (p_u_v m_u_v), leaving the other quantity to be solved for (p_y_v m_y_v):","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\tp_mathcalE(v)_v = p_u_vquad n_mathcalE(v)m_mathcalE(v)_v = m_y_v forall v inmathcalV_bp\n\tp_mathcalE(v)_v = p_y_vquad n_mathcalE(v)m_mathcalE(v)_v = m_u_v forall v inmathcalV_bm\nendalign*","category":"page"},{"location":"DampedWaveNet/#Discretization","page":"Damped Wave Net","title":"Discretization","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"The Galerkin variational form of the damped wave equations can be formulated as follows, where p_eintextspan mathcalP_e mathcalP_e=pi_1dotspi_n, m_eintextspan mathcalM_e mathcalM_e=mu_1dotsmu_n:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\ta_eint_epartial_tp_epi_e dx = -int_epartial_xm_epi_e dx forall pi_einmathcalP_e\n\tb_eint_epartial_tm_emu_e dx = -p_emu_e_partial e+int_ep_epartial_xmu_e dx -d_eint_em_emu_e dx forall mu_einmathcalM_e\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"The boundary terms -p_emu_e_partial e are the result of integration by parts and can be grouped by vertex as follows:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\t-n_e mu_ep_i_v  forall mu_e inmathcalM_equad forall einmathcalE(v)quad forall vinmathcalV_i\n\t-n_mathcalE(v) mu_mathcalE(v)p_u_v forall mu_e inmathcalM_equad forall v inmathcalV_bp\n\t-n_mathcalE(v) mu_mathcalE(v)p_y_v forall mu_e inmathcalM_equad forall v inmathcalV_bm\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"It now becomes apparent that in matrix form, the linear operators in several pairs of terms are each other's (negative) transpose. Hence, we can write our system of equations as the following linear DAE:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n    underbrace\n    beginbmatrix\n        kettA_pkettM_p    \n         kettB_mkettM_m   \n          0  \n           0\n    endbmatrix_kettE\n    beginbmatrix\n        kettdotp\n        kettdotm\n        kettdotp_i\n        kettdotp_y\n    endbmatrix =\n    underbrace\n    beginbmatrix\n         -kettG_m   \n        kettG_m^T -kettD_mkettM_m -kettC_m^T  kettU_m^T\n         kettC_m  \n         -kettU_m \n    endbmatrix_kettA\n    beginbmatrix\n        kettp\n        kettm\n        kettp_i\n        kettp_y\n    endbmatrix +\n    underbrace\n    beginbmatrix\n         \n        kettY_m^T \n          \n         kettI\n    endbmatrix_kettB\n    beginbmatrix\n        kettp_u\n        kettm_u\n    endbmatrix\n    beginbmatrix\n        kettm_y\n        kettp_y\n    endbmatrix =\n    underbrace\n    beginbmatrix\n        0  kettY_m  \n          0   kettI\n    endbmatrix_kettB^T \n    beginbmatrix\n        kettp\n        kettm\n        kettp_i\n        kettp_y\n    endbmatrix\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"kettM_p kettM_m: mass matrices for p m\nkettA_p kettB_m kettD_m: diagonal matrices containing the edge parameters a_e b_e d_e\nkettG_m: matrix coming from the gradient of m\nkettC_m: matrix coming from the mass conservation conditions on m\nkettU_m kettY_m: matrices  selecting kettm_u kettm_y from kettm","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"Since kettp contains all the pressure variables, kettp_i and kettp_y are redundant in the solution vector. However, they are not explicitly tied to kettp in the system. It can be proven that the system has a unique solution and that this constrains kettp_i and kettp_y to be equal to their counterparts in kettp, ensuring that the original variational problem is solved (Egger, 2018).","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"The system can be written in standard linear port-Hamiltonian form as follows:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n    kettEkettdotx = (kettJ-kettR)kettQkettx + (kettG-kettP)kettu\n    ketty = (kettG+kettP)^HkettQkettx + (kettS+kettN)kettu\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"where","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\nkettJ = frac12(kettA-kettA^mathsfT) quad\nkettR = -frac12(kettA+kettA^mathsfT) quad\nkettQ = kettI quad\nkettG = kettB quad\nkettP = 0 quad\nkettS = kettN = 0\nendalign*","category":"page"},{"location":"DampedWaveNet/#Interface","page":"Damped Wave Net","title":"Interface","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"DampedWaveNet","category":"page"},{"location":"DampedWaveNet/#PortHamiltonianBenchmarkSystems.DampedWaveNet","page":"Damped Wave Net","title":"PortHamiltonianBenchmarkSystems.DampedWaveNet","text":"This struct descibes port-Hamiltonian pressure wave conducting pipe systems, as given in Egger et al. Structure-Preserving Model Reduction for Damped Wave Propagation in Transport Networks\n\nArguments\n\nincidence_matrix: Sparse incidence matrix describing the pipe network\nedge_parameters: Named tuple containing vectors a, b, d, l, n, respectively containing the parameters a,b,d,                    the length and the number of FEM elements of each pipe (ordered as in the incidence_matrix)\nboundary_conditions: Vector of chars 'p', 'm', describing the type of boundary condition at each boundary                        vertex (ordered as in the incidence_matrix)\n\n\n\n\n\n","category":"type"},{"location":"DampedWaveNet/#References","page":"Damped Wave Net","title":"References","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"@article{EKLSMM2018,\n  author = {Egger, H. and Kugler, T. and Liljegren-Sailer, B. and Marheineke, N. and Mehrmann, V.},\n  title = {On Structure-Preserving Model Reduction for Damped Wave Propagation in Transport Networks},\n  journal = {SIAM Journal on Scientific Computing},\n  volume = {40},\n  number = {1},\n  pages = {A331-A365},\n  year = {2018},\n  doi = {10.1137/17M1125303},\n  URL = {https://doi.org/10.1137/17M1125303},\n  eprint = {https://doi.org/10.1137/17M1125303}\n}","category":"page"},{"location":"#PortHamiltonianBenchmarkSystems","page":"Home","title":"PortHamiltonianBenchmarkSystems","text":"","category":"section"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a collection of port-Hamiltonian benchmark systems that can be used to test algorithms designed for simulation, control, or model-order reduction of port-Hamiltonian systems. We feature a wide spectrum of linear, nonlinear, ODE and DAE systems. Benchmark systems are loaded via functions that also allow to set free modeling parameters (such as the stiffness in a mass spring damper chain).","category":"page"},{"location":"","page":"Home","title":"Home","text":"PortHamiltonianBenchmarkSystems is a julia-Package that also supports MATLAB or python users by providing download links to all benchmark examples.","category":"page"},{"location":"#Installation-and-Usage","page":"Home","title":"Installation and Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the julia REPL, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"to install PortHamiltonianBenchmarkSystems and gain access to all BenchmarkExamples directly within julia. To load the one of the benchmark systems simply type","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain()","category":"page"},{"location":"","page":"Home","title":"Home","text":"to load the model used in Gugercin2012. To learn about tunable options for this benchmark example, simply load the documentation using the following call.","category":"page"},{"location":"","page":"Home","title":"Home","text":"?gugercin_pH_msd_chain","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you do not plan to use julia as main language for your project but still want to take advantage of this package, you can download mat-files for each benchmark example in our collection. The links can be found in this documentation at the corresponding example page. However, in this way you cannot configure the parameters yourself. For that, you can first generate the system matrices in julia and then use MAT package to store them as mat-file and use that in your preferred programming environment.","category":"page"},{"location":"#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This benchmark collection is driven by the active support of the port-Hamiltonian community. If your research has lead to port-Hamiltonian models that may be relevant for this collection, we are happy to include it in this collection. Each benchmark system consists of code that generates the corresponding system matrices as well as a documentation that explains the origin, potential application, and special features of the model. For reference, check out our first example pages for a port-Hamiltonian mass spring damper chain and the corresponding code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To add your example, you can either simply fork our repository, add your example generation code and documentation, and issue a pull request or send us your code and a markdown file (using KaTeX for math expressions) to us via E-Mail.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nIf your benchmark example requires large files for constructions, do not try to add them to this git repository. Instead we recommend to use Zenodo for storing the large files and downloading them on request. An example for this can be found here.","category":"page"},{"location":"GugercinMSDChain/#Single-MSD-Chain","page":"Single MSD Chain","title":"Single MSD Chain","text":"","category":"section"},{"location":"GugercinMSDChain/#Description","page":"Single MSD Chain","title":"Description","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"This benchmark is a model for a mass-spring-damper chain. It is presented in GPBS2012.","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"(Image: Mass-spring-damper chain system)","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"The chain consists of N = fracn2 masses m_1ldotsm_n2 that are each connected with their neighboring masses by springs with spring constants k_1ldotsk_n2. The last mass m_n2 is connected to a wall via the spring k_n2 while at the first two masses m_1 and m_2 external forces u_1(cdot) and u_2(cdot) are applied. Moreover, each mass is connected with the ground with a damper with viscosities c_1ldotsc_n2. This configuration leads to a second-order system of the form","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"Mddotq(t)+Cdotq(t)+Kq(t) = B_2u(t)","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"where q(t) = beginpmatrix q_1(t)ldotsq_n2(t)endpmatrix^mathsfT is the vector of displacements of each mass and u(t) = beginpmatrix u_1(t)u_2(t)endpmatrix^mathsfT is the vector of inputs. Moreover, ","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\nM = beginbmatrix m_1       m_2       m_3       ddots       m_n2 endbmatrix quad C = beginbmatrix c_1       c_2       c_3       ddots       c_n2 endbmatrix \nK = beginbmatrix k_1  -k_1     -k_1  k_1 + k_2  -k_2     -k_2  k_2+k_3  ddots      ddots  ddots  -k_n2-1     -k_n2-1  k_n2-1 + k_n2 endbmatrix quad B_2 = beginbmatrix 1  0 \n0  1  0  0  vdots  vdots  0  0 endbmatrix\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"The output of the system is chosen as the velocities of the masses which are controlled, i.e.,","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"y(t) = beginpmatrix dotq_1(t)  dotq_2(t)endpmatrix","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"A linearization leads to the first-order system","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\nbeginbmatrix I_n  0  0  M endbmatrix beginpmatrix dotx_1(t)  dotx_2(t) endpmatrix  =\nbeginbmatrix 0  I_n  -K  -D endbmatrix beginpmatrix x_1(t)  x_2(t) endpmatrix + beginbmatrix 0  B_2 endbmatrix u(t) \ny(t) = beginbmatrix 0  B_2^mathsfT endbmatrix beginpmatrix x_1(t)  x_2(t) endpmatrix\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"where x_1(t) = q(t) and x_2(t) = dotq(t). Assume that one uses the momenta instead of velocities, i.e., x_2(t) = dotq(t) is replaced by","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"  p(t) = beginpmatrix p_1(t)ldotsp_n2(t)endpmatrix^mathsfT = beginpmatrix m_1q_1(t)ldotsm_n2q_n2(t)endpmatrix^mathsfT","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"With this and by appropriate permutations of columns and rows of the system equations one finally obtains the port-Hamiltonian formulation","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\ndot x(t) = (J-R) Q x(t) + Bu(t) \ny(t) = B^mathsfT Q x(t)\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"where","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\n J = beginbmatrix 0  1       -1  0         0  1       -1  0  ddots       ddots  ddots  ddots        ddots  0  1        -1  0 endbmatrix quad \n R = beginbmatrix 0  0       0  c_1         0  0       0  c_2  ddots       ddots  ddots  ddots        ddots  0  0        0  c_n2 endbmatrix \n Q = beginbmatrix k_1  0  k_1  0      0  frac1m_1  0  0      -k_1  0  k_1+k_2  0  -k_2  0    0  0  0  frac1m_2  0  0       ddots  ddots  ddots  ddots       ddots  ddots   ddots  ddots       -k_n2-1  0  k_n2-1+k_n2  0      0  0  0  frac1m_n2 endbmatrix quad B = beginbmatrix 0  0  1  0  0  0  0  1  vdots  vdots  vdots  vdots  0  0  0  0 endbmatrix\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"and ","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":" x(t) = beginpmatrix q_1(t)p_1(t)q_2(t)p_2(t)ldotsq_n2(t)p_n2(t)endpmatrix^mathsfT","category":"page"},{"location":"GugercinMSDChain/#Parameters","page":"Single MSD Chain","title":"Parameters","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"This is a variable-dimension model in which N = fracn2 in N can be determined by the user. We have chosen these default parameters (without units).","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\n m_1 = ldots = m_n2 = 4 \n k_1 = ldots = k_n2 = 4 \n c_1 = ldots = c_n2 = 1 \n N = 50\nendaligned","category":"page"},{"location":"GugercinMSDChain/#Interface","page":"Single MSD Chain","title":"Interface","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"To obtain system matrices J R Q and B use the following function call.","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain() # for standard parameters","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"To specify optional arguments, specify the parameters as named arguments.","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain(n_cells = 150, k_i = 10)","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"The transfer function can be defined as follows.","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"using LinearAlgebra, PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain(n_cells = 150, k_i = 10)\nH(s) = B'*((s*I-(J-R)*Q)\\B)","category":"page"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"gugercin_pH_msd_chain","category":"page"},{"location":"GugercinMSDChain/#PortHamiltonianBenchmarkSystems.gugercin_pH_msd_chain","page":"Single MSD Chain","title":"PortHamiltonianBenchmarkSystems.gugercin_pH_msd_chain","text":"gugercin_pH_msd_chain(; n_cells=50, m=2, c_i=1.0, m_i=4.0, k_i=4.0)\n\nThis function returns the port Hamiltonian mass-spring-damper system described in S. Gugercin et al.:       Structure-preserving tangential interpolation for model reduction of       port-Hamiltonian systems\n\nArguments\n\nn_cells: The number of masses. The system dimension is 2n_cells\nc_i: The amount of damping\nm_i: The weight of the masses\nk_i: The stiffness of the springs\n\nOutputs\n\nMatrices: J R Q B. The resulting transfer function is H(s) = B^mathsfT Q  (sI-(J-R)Q)^-1B.\n\n\n\n\n\n","category":"function"},{"location":"GugercinMSDChain/#References","page":"Single MSD Chain","title":"References","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"@article{GPBS2012,\n\ttitle = {Structure-preserving tangential interpolation for model reduction of port-{Hamiltonian} systems},\n\tvolume = {48},\n\tnumber = {9},\n\tjournal = {Automatica J. IFAC},\n\tauthor = {Gugercin, S. and Polyuga, R. V. and Beattie, C. and van der Schaft, A.},\n\tyear = {2012},\n\tpages = {1963--1974},\n}","category":"page"}]
}
