var documenterSearchIndex = {"docs":
[{"location":"PoroModel/#Poroelastic-Network-Model","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"","category":"section"},{"location":"PoroModel/#Description","page":"Poroelastic Network Model","title":"Description","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"This benchmark is the poroelastic network model presented in  Altmann2021. The model is derived from Biot's consolidation model  for poroelastic elasticity. Let Omega subseteq mathbbR^d be a Lipschitz  domain with din23 and mathbbT = 0T for T in (0infty). Consider the system of coupled partial differential equations","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n rho fracpartial^2partial t^2 u(txi) - nabla sigma(u(txi)) + \n nabla (alpha p(txi)) = widehatf(txi) quad textin  (0T times \nOmega  \n fracpartialpartial t left( alpha nablacdot u(txi) + \n frac1M p(txi)right) - nabla cdot left( frackappanunabla \np(txi) right) = widehatg(txi) quad textin  (0T times Omega\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Here, the displacement field u mathbbT times Omega to R and the  pressure field p mathbbT times Omega to R are searched solution  functions. Moreover, the stress-strain constitute relation","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"sigma(u(txi)) = 2muvarepsilon(u(txi)) + \nlambda(nabla cdot u(txi)) mathcalI quad textwith quad \nvarepsilon(u(txi)) = frac12left( nabla u(txi) + (nabla u(txi))^mathsfT \nright)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"is satisfied, where","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"mu and lambda are the Lam√© coefficients,\nmathcalI denotes the identity tensor,\nalpha is the Biot-Willes fluid solid coupling coefficient,\nM is the Biot modulus,\nkappa is the permeability,\nrho is the density,\nmu is the fluid viscosity,\nwidehatf (0T times Omega to R^d are the volume-distributed forces,\nwidehatg (0T times Omega to R is the external injection.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The PDE system is equipped with homogeneous Dirichlet boundary conditions","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" u(txi) = 0 quad p(txi) = 0 quad texton \n (0T times partial Omega","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"as well initial conditions p(0cdot) = p^0  partial Omega to R,  u(0cdot) = u^0  partial Omega to R^d, and fracpartialpartial  tu(0cdot) = dotu^0  partial Omega to R^d. Define the Hilbert spaces","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathcalV = leftH_0^1(Omega)right^dquad mathcalH_mathcalV = \nleftL^2(Omega)right^d quad mathcalQ = H_0^1(Omega)quad \nmathcalH_mathcalQ = L^2(Omega)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"and the operators","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\nmathcalY mathcalH_mathcalV to mathcalH_mathcalV^* quad leftlangle mathcalYuv rightrangle = int_Omega rho u \nvmathrmdxi \nmathcalM mathcalH_mathcalQ to mathcalH_mathcalQ^* \nquad leftlangle mathcalMpq rightrangle = int_Omega frac1M \npqmathrmdxi \nmathcalA mathcalV to mathcalV^* \nquad leftlangle mathcalAuv rightrangle = int_Omega \nsigma(u) varepsilon(v)mathrmdxi \nmathcalK mathcalQ to mathcalQ^* \nquad leftlangle mathcalKpq rightrangle = int_Omega \nfrackappanu nabla p cdot nabla qmathrmdxi \nmathcalD mathcalV to mathcalH_mathcalQ^* \nquad leftlangle mathcalDuq rightrangle = int_Omega alpha(nabla \ncdot u)q mathrmdxi\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Note that mathcalY, mathcalM, mathcalA, and mathcalK are  positive definite. To determine the weak form of the PDE, the first equation is  multiplied by a test function v in mathcalV while the second equation is  multiplied with q in mathcalQ. Further we introduce the linear forms","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" f(t) = int_Omega widehatf(t) cdot mathrmd xi in \nmathcalH_mathcalV^* quad \n g(t) = int_Omega widehatg(t) cdot mathrmd xi in \nmathcalH_mathcalQ^*","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Then for initial conditions p^0 in mathcalH_mathcalQ, u^0 in  mathcalV, and dotu^0 in mathcalH_mathcalV and right-hand  sides f in L^2(mathbbTmathcalH_mathcalV) and f in  L^2(mathbbTmathcalH_mathcalQ) one aims to find u in  L^2(mathbbTmathcalV) and p in  L^2(mathbbTmathcalQ) with dotu in  L^2(mathbbTmathcalH_mathcalV), ddotu in  L^2(mathbbTmathcalV^*), and dotp in  L^2(mathbbTmathcalQ^*) such that","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n mathcalY ddotu(t) + mathcalA dotu(t) - mathcalD^* u(t) = f(t) \nquad textin   mathcalV^* \nmathcalD dotu(t) + mathcalM dotp(t) + mathcalK p(t) = g(t) \nquad textin  mathcalQ^*\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"for almost all t in (0T), where mathcalD^* denotes the dual operator  of mathcalD. By introducing the auxiliary variable w = dotu, this  operator equation can be written in first-order form as","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" beginbmatrix\n mathcalY  0  0  0  mathcalA  0  0  0  mathcalM\n endbmatrix beginpmatrix dotw(t)  dotu(t)  dotp(t) \nendpmatrix = \n beginbmatrix\n 0  -mathcalA  mathcalD^*  mathcalA^*  0  0  -mathcalD  0 \n -mathcalK\n endbmatrix beginpmatrix w(t)  u(t)  p(t) endpmatrix + \nbeginpmatrix f(t)  0  g(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Writing the inhomogeneity as","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" beginpmatrix f(t)  0  g(t) endpmatrix = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix \nbeginpmatrix f(t)  g(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"and defining the output","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathbfy(t) = beginpmatrix w(t)  p(t) endpmatrix = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix \nbeginpmatrix w(t)  u(t)  p(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"we obtain the port-Hamiltonian system","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n mathcalE dotmathbfx(t) = (mathcalJ - mathcalR) mathbfx(t) + \nmathcalB   mathbfv(t) \n mathbfy(t) = mathcalB^* mathbfx(t)\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"with ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathcalE = beginbmatrix\n mathcalY  0  0  0  mathcalA  0  0  0  mathcalM\n endbmatrix quad mathcalJ = beginbmatrix\n 0  -mathcalA  mathcalD^*  mathcalA^*  0  0  -mathcalD  0 \n 0\n endbmatrix quad mathcalR = beginbmatrix\n 0  0  0  0  0  0  0  0 \n mathcalK\n endbmatrix quad mathcalB = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"where mathbfx(t) = leftbeginsmallmatrix w(t)  u(t)  p(t)  endsmallmatrixright and mathbfv(t) = leftbeginsmallmatrix f(t)   g(t) endsmallmatrixright. ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Discretizing this system with standard mathcalP_1 Lagrange finite elements  results in the finite-dimensional port-Hamiltonian system ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n E dotx(t) = (J - R) x(t) + Bv(t) \n         y(t) = B^mathsfT x(t)\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"with ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n E = beginbmatrix\n rho M_u  0  0  0  K_u(mulambda)  0  0  0  frac1M M_p\n endbmatrix quad J = beginbmatrix\n 0  -K_u(mulambda)  alpha D^mathsfT  K_u(mulambda)^mathsfT  0  0  \n-alpha D  0  0\n endbmatrix  R = beginbmatrix\n 0  0  0  0  0  0  0  0 \n frackappanu K_p\n endbmatrix quad mathcalB = beginbmatrix B_f  0  0  0  0  \nB_g endbmatrix\nendaligned","category":"page"},{"location":"PoroModel/#Parameters","page":"Poroelastic Network Model","title":"Parameters","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"For this benchmark, the domain Omega = 01^2 with d=2 has been chosen  and the volume-distributed forces widehatf and injection widehatg are  spatially independent resulting in two inputs, i.\\,e., B in R^n times m  with m = 2. Moreover, different discretization levels are available,   resulting in systems with state-space dimensions n=320, n = 980, and n =  1805. These discretizations have been obtained using the python  interface of FEniCS. The following fixed parameters have been chosen:","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"lambda = 12,\nmu = 6.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The following parameters are variable with the default values","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"rho = 10^-3,\nalpha = 079,\nfrac1M = 780cdot 10^3,\nfrackappanu = 63333.","category":"page"},{"location":"PoroModel/#Interface","page":"Poroelastic Network Model","title":"Interface","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The system matrices E J R and B can be generated by the following function call.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = poro_elasticity_model()","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The free parameters are given as named arguments. Note that n in  320 980 1805 .","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = poro_elasticity_model(n = 320, eta = 1e-3)\nH(s) = B'*((s*E-(J-R))\\B)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Here H is the transfer function.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"poro_elasticity_model","category":"page"},{"location":"PoroModel/#PortHamiltonianBenchmarkSystems.poro_elasticity_model","page":"Poroelastic Network Model","title":"PortHamiltonianBenchmarkSystems.poro_elasticity_model","text":"poro_elasticity_model(;     n = 980,     rho = 1e-3,     alpha = 0.79,     M = 1/7.80e3,     kappanu = 633.33,     eta = 1e-4,     force_download = false   )\n\nThis function returns a port-Hamiltonian model of linear poroelasticity in a bounded Lipschitz domain as described in     Altmann, Mehrmann, Unger: Port-Hamiltonian Formulations of Poroelastic     Network Models\n\nArguments\n\nn: System dimension (can only be either: 320, 980, or 1805). Default = 980.\nrho: density. Default = 1e-3.\nalpha: Biot-Willis fluid-solid coupling coefficient. Default = 0.79.\nbm: Biot-Modulus. Default = 1/7.8e3.\nkappanu: Quotient kappa/Nu, where kappa denotes the permeability and nu denotes the fluid viscosity. Default = 633.33.\neta: artificial damping coefficient. Default = 1e-4.\n\n\n\n\n\n","category":"function"},{"location":"PoroModel/#References","page":"Poroelastic Network Model","title":"References","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"@misc{Altmann2021,\n      title={Port-{H}amiltonian formulations of poroelastic network models}, \n      author={R. Altmann and V. Mehrmann and B. Unger},\n      year={2021},\n      eprint={2012.01949},\n      archivePrefix={arXiv},\n      primaryClass={math.DS}\n}","category":"page"},{"location":"#PortHamiltonianBenchmarkSystems","page":"Home","title":"PortHamiltonianBenchmarkSystems","text":"","category":"section"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a collection of port-Hamiltonian benchmark systems that can be used to test algorithms designed for simulation, control, or model-order reduction of port-Hamiltonian systems. We feature a wide spectrum of linear, nonlinear, ODE and DAE systems. Benchmark systems are loaded via functions that also allow to set free modeling parameters (such as the stiffness in a mass spring damper chain).","category":"page"},{"location":"","page":"Home","title":"Home","text":"PortHamiltonianBenchmarkSystems is a julia-Package that also supports MATLAB or python users by providing download links to all benchmark examples.","category":"page"},{"location":"#Installation-and-Usage","page":"Home","title":"Installation and Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the julia REPL, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/Algopaul/PortHamiltonianBenchmarkSystems/\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"to install PortHamiltonianBenchmarkSystems and gain access to all BenchmarkExamples directly within julia. To load the one of the benchmark systems simply type","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain()","category":"page"},{"location":"","page":"Home","title":"Home","text":"to load the model used in Gugercin2012. To learn about tunable options for this benchmark example, simply load the documentation using the following call.","category":"page"},{"location":"","page":"Home","title":"Home","text":"?gugercin_pH_msd_chain","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you do not plan to use julia as main language for your project but still want to take advantage of this package, you can download mat-files for each benchmark example in our collection. The links can be found in this documentation at the corresponding example page. However, in this way you cannot configure the parameters yourself. For that, you can first generate the system matrices in julia and then use MAT package to store them as mat-file and use that in your preferred programming environment.","category":"page"},{"location":"#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This benchmark collection is driven by the active support of the port-Hamiltonian community. If your research has lead to port-Hamiltonian models that may be relevant for this collection, we are happy to include it in this collection. Each benchmark system consists of code that generates the corresponding system matrices as well as a documentation that explains the origin, potential application, and special features of the model. For reference, check out our first example pages for a port-Hamiltonian mass spring damper chain and the corresponding code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To add your example, you can either simply fork our repository, add your example generation code and documentation, and issue a pull request or send us your code and a markdown file (using KaTeX for math expressions) to us via E-Mail.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nIf your benchmark example requires large files for constructions, do not try to add them to this git repository. Instead we recommend to use Zenodo for storing the large files and downloading them on request. An example for this can be found here.","category":"page"},{"location":"GugercinMSDChain/#Gugercin-MSD-Chain","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"","category":"section"},{"location":"GugercinMSDChain/#Description","page":"Gugercin MSD Chain","title":"Description","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"This benchmark is a model for a mass-spring-damper chain. It is presented in Gugercin2012.","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"(Image: Mass-spring-damper chain system)","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"The chain consists of N = fracn2 masses m_1ldotsm_n2 that are each connected with their neighboring masses by springs with spring constants k_1ldotsk_n2. The last mass m_n2 is connected to a wall via the spring k_n2 while at the first two masses m_1 and m_2 external forces u_1(cdot) and u_2(cdot) are applied. Moreover, each mass is connected with the ground with a damper with viscosities c_1ldotsc_n2. This configuration leads to a second-order system of the form","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"Mddotq(t)+Cdotq(t)+Kq(t) = B_2u(t)","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"where q(t) = beginpmatrix q_1(t)ldotsq_n2(t)endpmatrix^mathsfT is the vector of displacements of each mass and u(t) = beginpmatrix u_1(t)u_2(t)endpmatrix^mathsfT is the vector of inputs. Moreover, ","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"beginaligned\nM = beginbmatrix m_1       m_2       m_3       ddots       m_n2 endbmatrix quad C = beginbmatrix c_1       c_2       c_3       ddots       c_n2 endbmatrix \nK = beginbmatrix k_1  -k_1     -k_1  k_1 + k_2  -k_2     -k_2  k_2+k_3  ddots      ddots  ddots  -k_n2-1     -k_n2-1  k_n2-1 + k_n2 endbmatrix quad B_2 = beginbmatrix 1  0 \n0  1  0  0  vdots  vdots  0  0 endbmatrix\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"The output of the system is chosen as the velocities of the masses which are controlled, i.e.,","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"y(t) = beginpmatrix dotq_1(t)  dotq_2(t)endpmatrix","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"A linearization leads to the first-order system","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"beginaligned\nbeginbmatrix I_n  0  0  M endbmatrix beginpmatrix dotx_1(t)  dotx_2(t) endpmatrix  =\nbeginbmatrix 0  I_n  -K  -D endbmatrix beginpmatrix x_1(t)  x_2(t) endpmatrix + beginbmatrix 0  B_2 endbmatrix u(t) \ny(t) = beginbmatrix 0  B_2^mathsfT endbmatrix beginpmatrix x_1(t)  x_2(t) endpmatrix\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"where x_1(t) = q(t) and x_2(t) = dotq(t). Assume that one uses the momenta instead of velocities, i.e., x_2(t) = dotq(t) is replaced by","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"  p(t) = beginpmatrix p_1(t)ldotsp_n2(t)endpmatrix^mathsfT = beginpmatrix m_1q_1(t)ldotsm_n2q_n2(t)endpmatrix^mathsfT","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"With this and by appropriate permutations of columns and rows of the system equations one finally obtains the port-Hamiltonian formulation","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"beginaligned\nx(t) = (J-R) Q x(t) + Bu(t) \ny(t) = B^mathsfT Q x(t)\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"where","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"beginaligned\n J = beginbmatrix 0  1       -1  0         0  1       -1  0  ddots       ddots  ddots  ddots        ddots  0  1        -1  0 endbmatrix quad \n R = beginbmatrix 0  0       0  c_1         0  0       0  c_2  ddots       ddots  ddots  ddots        ddots  0  0        0  c_n2 endbmatrix \n Q = beginbmatrix k_1  0  k_1  0      0  frac1m_1  0  0      -k_1  0  k_1+k_2  0  -k_2  0    0  0  0  frac1m_2  0  0       ddots  ddots  ddots  ddots       ddots  ddots   ddots  ddots       -k_n2-1  0  k_n2-1+k_n2  0      0  0  0  frac1m_n2 endbmatrix quad B = beginbmatrix 0  0  1  0  0  0  0  1  vdots  vdots  vdots  vdots  0  0  0  0 endbmatrix\nendaligned","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"and ","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":" x(t) = beginpmatrix q_1(t)p_1(t)q_2(t)p_2(t)ldotsq_n2(t)p_n2(t)endpmatrix^mathsfT","category":"page"},{"location":"GugercinMSDChain/#Parameters","page":"Gugercin MSD Chain","title":"Parameters","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"This is a variable-dimension model in which N = fracn2 in N can be determined by the user. We have chosen these default parameters (without units).","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"beginaligned\n m_1 = ldots = m_n2 = 4 \n k_1 = ldots = k_n2 = 4 \n c_1 = ldots = c_n2 = 1 \n N = 50\nendaligned","category":"page"},{"location":"GugercinMSDChain/#Interface","page":"Gugercin MSD Chain","title":"Interface","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"To obtain system matrices J R Q and B use the following function call.","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain() # for standard parameters","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"To specify optional arguments, specify the parameters as named arguments.","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain(n_cells = 150, k_i = 10)","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"The transfer function can be defined as follows.","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"using LinearAlgebra, PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain(n_cells = 150, k_i = 10)\nH(s) = B'*((s*I-(J-R)*Q)\\B)","category":"page"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"gugercin_pH_msd_chain","category":"page"},{"location":"GugercinMSDChain/#PortHamiltonianBenchmarkSystems.gugercin_pH_msd_chain","page":"Gugercin MSD Chain","title":"PortHamiltonianBenchmarkSystems.gugercin_pH_msd_chain","text":"gugercin_pH_msd_chain(; n_cells=50, m=2, c_i=1.0, m_i=4.0, k_i=4.0)\n\nThis function returns the port Hamiltonian mass-spring-damper system described in S. Gugercin et al.:       Structure-preserving tangential interpolation for model reduction of       port-Hamiltonian systems\n\nArguments\n\nn_cells: The number of masses. The system dimension is 2n_cells\nc_i: The amount of damping\nm_i: The weight of the masses\nk_i: The stiffness of the springs\n\nOutputs\n\nMatrices: J R Q B. The resulting transfer function is H(s) = B^mathsfT Q  (sI-(J-R)Q)^-1B.\n\n\n\n\n\n","category":"function"},{"location":"GugercinMSDChain/#References","page":"Gugercin MSD Chain","title":"References","text":"","category":"section"},{"location":"GugercinMSDChain/","page":"Gugercin MSD Chain","title":"Gugercin MSD Chain","text":"@article{Gugercin2012,\n\ttitle = {Structure-preserving tangential interpolation for model reduction of port-{Hamiltonian} systems},\n\tvolume = {48},\n\tnumber = {9},\n\tjournal = {Automatica J. IFAC},\n\tauthor = {Gugercin, S. and Polyuga, R. V. and Beattie, C. and van der Schaft, A.},\n\tyear = {2012},\n\tpages = {1963--1974},\n}","category":"page"}]
}
