var documenterSearchIndex = {"docs":
[{"location":"SingleMSDChain/#Single-MSD-Chain","page":"Single MSD Chain","title":"Single MSD Chain","text":"","category":"section"},{"location":"SingleMSDChain/#Description","page":"Single MSD Chain","title":"Description","text":"","category":"section"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"This benchmark is a model for a mass-spring-damper chain. It is presented in GPBS2012.","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"(Image: Mass-spring-damper chain system)","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"The chain consists of N = fracn2 masses m_1ldotsm_n2 that are each connected with their neighboring masses by springs with spring constants k_1ldotsk_n2. The last mass m_n2 is connected to a wall via the spring k_n2 while at the first two masses m_1 and m_2 external forces u_1(cdot) and u_2(cdot) are applied. Moreover, each mass is connected with the ground with a damper with viscosities c_1ldotsc_n2. This configuration leads to a second-order system of the form","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"Mddotq(t)+Cdotq(t)+Kq(t) = B_2u(t)","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"where q(t) = beginpmatrix q_1(t)ldotsq_n2(t)endpmatrix^mathsfT is the vector of displacements of each mass and u(t) = beginpmatrix u_1(t)u_2(t)endpmatrix^mathsfT is the vector of inputs. Moreover, ","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\nM = beginbmatrix m_1       m_2       m_3       ddots       m_n2 endbmatrix quad C = beginbmatrix c_1       c_2       c_3       ddots       c_n2 endbmatrix \nK = beginbmatrix k_1  -k_1     -k_1  k_1 + k_2  -k_2     -k_2  k_2+k_3  ddots      ddots  ddots  -k_n2-1     -k_n2-1  k_n2-1 + k_n2 endbmatrix quad B_2 = beginbmatrix 1  0 \n0  1  0  0  vdots  vdots  0  0 endbmatrix\nendaligned","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"The output of the system is chosen as the velocities of the masses which are controlled, i.e.,","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"y(t) = beginpmatrix dotq_1(t)  dotq_2(t)endpmatrix","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"A linearization leads to the first-order system","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\nbeginbmatrix I_n  0  0  M endbmatrix beginpmatrix dotx_1(t)  dotx_2(t) endpmatrix  =\nbeginbmatrix 0  I_n  -K  -D endbmatrix beginpmatrix x_1(t)  x_2(t) endpmatrix + beginbmatrix 0  B_2 endbmatrix u(t) \ny(t) = beginbmatrix 0  B_2^mathsfT endbmatrix beginpmatrix x_1(t)  x_2(t) endpmatrix\nendaligned","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"where x_1(t) = q(t) and x_2(t) = dotq(t). Assume that one uses the momenta instead of velocities, i.e., x_2(t) = dotq(t) is replaced by","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"  p(t) = beginpmatrix p_1(t)ldotsp_n2(t)endpmatrix^mathsfT = beginpmatrix m_1q_1(t)ldotsm_n2q_n2(t)endpmatrix^mathsfT","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"With this and by appropriate permutations of columns and rows of the system equations one finally obtains the port-Hamiltonian formulation","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\ndot x(t) = (J-R) Q x(t) + Bu(t) \ny(t) = B^mathsfT Q x(t)\nendaligned","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"where","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\n J = beginbmatrix 0  1       -1  0         0  1       -1  0  ddots       ddots  ddots  ddots        ddots  0  1        -1  0 endbmatrix quad \n R = beginbmatrix 0  0       0  c_1         0  0       0  c_2  ddots       ddots  ddots  ddots        ddots  0  0        0  c_n2 endbmatrix \n Q = beginbmatrix k_1  0  k_1  0      0  frac1m_1  0  0      -k_1  0  k_1+k_2  0  -k_2  0    0  0  0  frac1m_2  0  0       ddots  ddots  ddots  ddots       ddots  ddots   ddots  ddots       -k_n2-1  0  k_n2-1+k_n2  0      0  0  0  frac1m_n2 endbmatrix quad B = beginbmatrix 0  0  1  0  0  0  0  1  vdots  vdots  vdots  vdots  0  0  0  0 endbmatrix\nendaligned","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"and ","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":" x(t) = beginpmatrix q_1(t)p_1(t)q_2(t)p_2(t)ldotsq_n2(t)p_n2(t)endpmatrix^mathsfT","category":"page"},{"location":"SingleMSDChain/#Parameters","page":"Single MSD Chain","title":"Parameters","text":"","category":"section"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"This is a variable-dimension model in which N = fracn2 in N can be determined by the user. We have chosen these default parameters (without units).","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"beginaligned\n m_1 = ldots = m_n2 = 4 \n k_1 = ldots = k_n2 = 4 \n c_1 = ldots = c_n2 = 1 \n N = 50\nendaligned","category":"page"},{"location":"SingleMSDChain/#Interface","page":"Single MSD Chain","title":"Interface","text":"","category":"section"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"To obtain system matrices J R Q and B use the following function call.","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain() # for standard parameters","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"To specify optional arguments, specify the parameters as named arguments.","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"using PortHamiltonianBenchmarkSystems\nJ, R, Q, B = gugercin_pH_msd_chain(n_cells = 150, k_i = 10)","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"The transfer function can be defined as follows.","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"using LinearAlgebra, PortHamiltonianBenchmarkSystems\nconfig = SingleMSDConfig()\nJ, R, Q, B = construct_system(config)\nH(s) = B'*((s*I-(J-R)*Q)\\B)","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"gugercin_pH_msd_chain","category":"page"},{"location":"SingleMSDChain/#PortHamiltonianBenchmarkSystems.gugercin_pH_msd_chain","page":"Single MSD Chain","title":"PortHamiltonianBenchmarkSystems.gugercin_pH_msd_chain","text":"gugercin_pH_msd_chain(; n_cells=50, m=2, c_i=1.0, m_i=4.0, k_i=4.0)\n\nThis function returns the port Hamiltonian mass-spring-damper system described in S. Gugercin et al.:       Structure-preserving tangential interpolation for model reduction of       port-Hamiltonian systems\n\nArguments\n\nn_cells: The number of masses. The system dimension is 2n_cells\nc_i: The amount of damping\nm_i: The weight of the masses\nk_i: The stiffness of the springs\n\nOutputs\n\nMatrices: J R Q B. The resulting transfer function is H(s) = B^mathsfT Q  (sI-(J-R)Q)^-1B.\n\n\n\n\n\n","category":"function"},{"location":"SingleMSDChain/#Control-System","page":"Single MSD Chain","title":"Control System","text":"","category":"section"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"For controller design benchmarks, we have defined a plant model based on the mass-spring-damper chain. It is defined with force control and verlocity outputs on the first two masses. The disturbance input and performance outputs are forces and verlocities, respectively, at the third and fourth mass. The plant is returned in standard state-space format to simplify interoperation with standard controller design methods.","category":"page"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"generate_MSD_plant","category":"page"},{"location":"SingleMSDChain/#PortHamiltonianBenchmarkSystems.generate_MSD_plant","page":"Single MSD Chain","title":"PortHamiltonianBenchmarkSystems.generate_MSD_plant","text":"generate_MSD_plant(n_cells::Int)\n\nConstructor for the configuration as control problem.\n\nArguments\n\nn_cells: The number of masses. The system dimension is 2n_cells.\n\nOutputs\n\nA: The system matrix of the plant.\nB: The input matrix of the plant, as a concatenation of B=hcat(B1, B2), where B1 and B2 describe the disturbance input and the control input, respectively. B2 has nw columns.\nC: The output matrix of the plant, as a concatenation of C=vcat(C1, C2), where C1 and C2 describe the performance output and the measured output, respectively. C2 has nz columns.\nD: The feedthrough matrix of the plant, as a concatenation of D=vcat(hcat(D11, D12), hcat(D21, D22)).\ndimension nw: dimension of the disturbance input.\ndimension nz: dimension of the performance output.\n\n\n\n\n\n","category":"function"},{"location":"SingleMSDChain/#References","page":"Single MSD Chain","title":"References","text":"","category":"section"},{"location":"SingleMSDChain/","page":"Single MSD Chain","title":"Single MSD Chain","text":"@article{GPBS2012,\n\ttitle = {Structure-preserving tangential interpolation for model reduction of port-{Hamiltonian} systems},\n\tvolume = {48},\n\tnumber = {9},\n\tjournal = {Automatica J. IFAC},\n\tauthor = {Gugercin, S. and Polyuga, R. V. and Beattie, C. and van der Schaft, A.},\n\tyear = {2012},\n\tpages = {1963--1974},\n}","category":"page"},{"location":"Elasticity2DAFW/#Planar-Elasticity-(Wwork-in-Progress)","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"","category":"section"},{"location":"Elasticity2DAFW/#Description","page":"Planar Elasticity (Wwork in Progress)","title":"Description","text":"","category":"section"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"This benchmark is the planar elastodynamic problem presented in Brugnoli2020 and discretized using the Arnold-Falk-Whinter weakly symmetric element Arnold2014. It corresponds to a mixed Hamiltonian formulation of linearized elasticity. Let Omega subseteq mathbbR^2 be a Lipschitz domain and mathbbT = 0T for T in (0infty). Consider the system of coupled partial differential equations","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"beginaligned\n rho fracpartialpartial t bmv(txi) = mathrmdiv bmSigma quad textin  (0T times Omega  \n mathcalCfracpartialpartial t bmSigma = mathrmsymnabla bmv quad textin  (0T times Omega\nendaligned","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"The operators appearing in this formulation are the symmetric gradient mathrmsymnabla = frac12(nabla + nabla^top) and the row-wise tensor divergence (mathrmDiv bmSigma)_i = sum_j partial_j bmSigma_ij. The velocity field bmv mathbbT times Omega to R^2 and the symmetric stress tensor field bmSigma mathbbT times Omega to R^2times 2_textsym are the unknowns of the problem. The physical parameters are the density rho and","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"mathcalC= frac12muleft(cdot) - fraclambda2mu + 2lambda mathrmTr(cdot) mathbfIright","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"the isotropic compliance tensor, where mu and lambda are the Lamé coefficients and mathbfI is the identity in R^2. ","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"The system can be compactly rewritten as","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"mathcalEpartial_t bmx = mathcalJbmx quad textin  (0T times Omega","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"where mathcalE is a bounded, symmetric and uniformly positive operator and mathcalJ is a formally skew-adjoint operator.","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"The PDE is boundary controlled via the Dirichlet boundary condition","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":" bmv(txi) = u_D(t xi) quad texton (0T times partial Omega","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"as well initial conditions bmv(0cdot) = bmv^0  partial Omega to R^2, bmSigma(0cdot) = bmSigma^0  partial Omega to R^d times d_mathrmsym.  The construction of conforming finite elements for symmetric tensors is involved. Therefore, a weakly symmetric finite element formulation will be employed, based on the following decomposition of the symmetric gradient ","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":" mathrmsymnabla bmv = nabla bmv - mathrmskw(nabla bmv)","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"where skw bmA = (bmA - bmA^top)2 in R^2times 2_mathrmskw is the skew-symmetric part of a matrix.  To introduce the weak form, define the Hilbert spaces","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"beginaligned\nV = L^2(Omega R^2) \nM = H^mathrmdiv(Omega R^2 times 2) = bmA in L^2(Omega R^2times 2)   mathrmdivbmA in L^2(Omega R^2) \nK = L^2(Omega R^2times 2_mathrmskw) \nU = H^12(partialOmega R^2)\nendaligned","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"To determine the weak form of the PDE, the first equation is  multiplied by a test function bmpsi_v in V. The second equation is multiplied by bmPsi_Sigma in M and integrated by parts. A third equation imposes the symmetry weakly by taking the inner product between a skew-symmetric test function and the stress tensor. The weak formulation therefore reads: given the initial conditions and the input bmu_D in U find bmv in V  bmSigma in M  bmR in K such that","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"beginaligned\nint_Omega bmpsi_v cdot partial_t bmv dx = int_Omega bmpsi_v cdot mathrmDiv bmSigma dx qquad forall bmpsi_v in mathcalV \nint_Omega bmPsi_Sigma  partial_t bmSigma dx + int_Omega bmPsi_Sigma  partial_t bmR dx = -int_Omega mathrmDiv bmpsi_Sigma cdot bmv dx + leftlanglebmpsi_Sigma cdot bmn  bmu_Drightrangle qquad forall bmpsi_v in mathcalV \nint_Omega bmPsi_R  partial_t bmSigma qquad forall bmPsi_R in mathcalK\nendaligned","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"where bmA = bmB = sumlimits_ij bmA_ij bmB_ij denotes the tensor contraction and leftlangle cdot  cdot rightrangle denotes a duality pairing between mathcalU and its topological dual mathcalU = H^-12(partialOmega R^2).  Consider a regular triangulation mathcalT_h with elements T. At the boundary partialOmega, the triangulation gives rise to boundary edges mathcalE_h^partial with edges E^partial. The following conforming finite element spaces are used to discretize the weak formulation ","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"beginaligned\nV_h = bmv_h in L^2(Omega R^2)   forall T in mathcalT_h bmv_h_T in mathrmDG_k-1^2 \nM_h = bmSigma_h in H^mathrmdiv(Omega R^2 times 2)   forall T in mathcalT_h  text and for  i=12 (bmSigma_i1 h  bmSigma_j2 h)_T in mathrmBDM_k \nK_h = bmR_h in L^2(Omega R^2times 2_mathrmskw)   forall T in mathcalT_h bmR_h_T in mathrmDG_k-1 \nU_h = u_D h in H^12(partialOmega R^2)   forall E^partial in mathcalE_h^partial bmu_D h_E^partial in mathrmCG_k \nendaligned","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"where k ge 1 is the polynomial degree of the finite elements and the acronyms stand for","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"DG: the discontinous galerkin finite element space;\nBDM: the Brezzi-Douglas-Marini space;\nCG: Lagrange elements.","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"Inserting the finite element approximation into the weak formulation, the following port-Hamiltonian system is obtained","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"beginaligned\n mathbfE dotmathbfx(t) = mathbfJmathbfx(t) + mathbfB mathbfu_D(t) \n  mathrmy(t) = mathbfB^mathsfT mathbfx(t)\nendaligned","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"with ","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"beginaligned\n mathbfE = beginbmatrix\n mathbfM_rho  0  0  0  mathbfM_mathcalC  mathbfA_lambda^mathsfT  0  mathbfA_lambda  0\n endbmatrix quad\n  mathbfJ = beginbmatrix\n 0  mathbfD_mathrmdiv  0  - mathbfD_mathrmdiv^mathsfT  0  0   0  0  0\n endbmatrix quad\n mathbfB = beginbmatrix 0  mathbfB_D  0 endbmatrix\nendaligned","category":"page"},{"location":"Elasticity2DAFW/#Parameters","page":"Planar Elasticity (Wwork in Progress)","title":"Parameters","text":"","category":"section"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"For this benchmark, a square domain Omega = 01^2 is considered. Moreover, different discretization levels are available,   resulting in systems with state-space dimensions n=1260 (5 elements per side and k=2), n = 1880 (10 elements per side and k=1), and n = 4920 (10 elements per side and k=2). These discretizations have been obtained using the python  interface of FEniCS. The following fixed parameters have been chosen:","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"lambda = 20,\nmu = 4\nrho = 1,","category":"page"},{"location":"Elasticity2DAFW/#Interface","page":"Planar Elasticity (Wwork in Progress)","title":"Interface","text":"","category":"section"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"The system matrices E J R and B can be generated by the following function call.","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"using PortHamiltonianBenchmarkSystems\nE, J, B = elasticity2Dafw_model()","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"The free parameters are given as named arguments. Note that n in  1260 1880 4920 .","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = elasticity2Dafw_model(n = 1260)\nH(s) = B'*((s*E-(J-R))\\B)","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"Here H is the transfer function.","category":"page"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"elasticity2Dafw_model()","category":"page"},{"location":"Elasticity2DAFW/#PortHamiltonianBenchmarkSystems.elasticity2Dafw_model-Tuple{}","page":"Planar Elasticity (Wwork in Progress)","title":"PortHamiltonianBenchmarkSystems.elasticity2Dafw_model","text":"elasticity2Dafw_model(; n = 1260)\n\nThis function returns a port-Hamiltonian model of linear elastodynamics in a bounded Lipschitz domain.\n\nArguments\n\nn: System dimension (can only be either: 1260, 1880, or 4920). Default = 1260.\n\nOutputs\n\nE J R B, matrices to construct the transfer function H(s) = B^mathsfT(sE-(J-R))^-1B)\n\n\n\n\n\n","category":"method"},{"location":"Elasticity2DAFW/#References","page":"Planar Elasticity (Wwork in Progress)","title":"References","text":"","category":"section"},{"location":"Elasticity2DAFW/","page":"Planar Elasticity (Wwork in Progress)","title":"Planar Elasticity (Wwork in Progress)","text":"@article{Arnold2014,\n   author  = {D. Arnold and J. Lee},\n   issue   = {6},\n   journal = {SIAM Journal on Numerical Analysis},\n   pages   = {2743-2769},\n   title   = {Mixed Methods for Elastodynamics with Weak Symmetry},\n   volume  = {52},\n   url     = {https://epubs.siam.org/doi/10.1137/13095032X},\n   year    = {2014}\n   }\n\n@phdthesis{Brugnoli2020,\n  author = {A.~Brugnoli},\n  title  = {A port-{H}amiltonian formulation of flexible structures. Modelling and structure-preserving finite element discretization},\n  school = {Universit\\'e de Toulouse, ISAE-SUPAERO, France},\n  year   = {2020}\n  }","category":"page"},{"location":"Contribution/#Contribution","page":"Contribution","title":"Contribution","text":"","category":"section"},{"location":"Contribution/#Modus-Operandi","page":"Contribution","title":"Modus Operandi","text":"","category":"section"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"This benchmark collection is driven by the active support of the port-Hamiltonian community. If your research has lead to port-Hamiltonian models that may be relevant for this collection, we would be happy to include them. If you wish to contribute to the project directly, please consult this page, fork our Git repository and issue a pull request. Alternatively, feel free to contact us via e-mail to discuss our potential collaboration. We are happy to receive reference implementations in other languages and reimplement them in Julia for this package.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"All entries in the collection consist of code for generating the system matrices, a comprehensive set of tests and a documentation page. Exact instructions for each of these parts are provided in the sections below. Some of the design choices may still be subject to change, but efforts are currently being made to settle on a final structure. Any subsequently required changes to community contributions will be handled by us.","category":"page"},{"location":"Contribution/#Code","page":"Contribution","title":"Code","text":"","category":"section"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"This package consists of a single module, containing the following five elements:","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"PHSystem: parametric composite type for storing system matrices in standard port-Hamiltonian form,\n<System>Config: (parametric) composite type for storing parameter sets for some system,\n<System>Config(id::String): external constructor returing default <System>Config instances, based on some id,\nconstruct_system(config::<System>Config): method returning system matrices in \"natural\" form, based on some <System>Config instance,\nPHSystem(config::<System>Config): external constructor returning PHSystem instances, based on some <System>Config instance.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"The last four elements are repeated for each benchmark system and are stored together in /src/<System>.jl, along with their respective docstrings in Markdown format. All <System>.jl files are included in /src/PortHamiltonianBenchmarkSystems.jl.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"To contribute to the code, simply add a file based on the example below at /src/<System>.jl and add a corresponding include statement to /src/PortHamiltonianBenchmarkSystems.jl. Some best practices for more complex systems are also given below.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"<details><summary>Code Example</summary><p>","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"export RandLinConfig\n\n\"\"\"\nComposite type describing a linear port-Hamiltonian system, where matrices ``J,\\ R,\\ G`` are random dense matrices of the correct structure (R positive semi-definite, J, G skew symmetric) with mean 0 and variance 1.\n# Arguments\n- n_x: number of state variables\n- n_p: number of input and output ports\n\"\"\"\nstruct RandLinConfig\n    n_x::UInt64\n    n_p::UInt64\nend\n\n\"\"\"\nMethod for constructing the system matries in \"natural\" form.\n# Arguments\n- `config`: `RandLinConfig` instance\n# Output\n- `system`: Named tuple containing the system matrices in 'natural' form\n\"\"\"\nfunction construct_system(config::RandLinConfig)\n    M1 = rand(config.n_x, config.n_x)\n    M2 = rand(config.n_x, config.n_x)\n    M3 = rand(config.n_x, config.n_p)\n\n    J = (M1 - M1')/sqrt(2)\n    R = (M2 * M2')/sqrt(config.n_x)\n    G = (M3 - M3')/sqrt(2)\n\n    return (J = J, R = R, G = G)\nend\n\nfunction PHSystem(config::RandLinConfig)\n    J, R, G = construct_system(config)\n\n    E = sparse(1.0I,size(J)...)\n    Q = sparse(1.0I,size(J)...)\n    P = spzeros(size(G)...)\n    N = spzeros(config.n_p, config.n_p)\n    S = spzeros(size(N)...)\n\n    return PHSystem(E, J, R, Q, G, P, S, N)\nend","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"</details><p>","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"<details><summary>Best Practices</summary><p>","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"While it may seem unnecessary in a simple case like this, it is important to include an internal constructor in <System>Config, to perform input validation:","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"struct RandLinConfig\n    n_x::UInt64\n    n_p::UInt64\n\n    RandLinConfig(n_x::UInt64, n_p::UInt64)\n        @assert n_x > 0 \"Number of state variables must be larger than 0\"\n        @assert n_p > 0 \"Number of ports must be larger than 0\"\n        return new(n_x, n_p)\n    end\nend","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"Similarly, while it does not make much sense to save default configurations for this random system, in reality one should provide a few default parameter sets. Once some adequate parameter sets have been determined and implemented in the form shown below, we will store them as MAT-files on our Zenodo and update the code to retrieve them as Julia artifacts when needed.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"\"\"\"\nConstructor for retrieving default `RandLinConfig` instances.\n# Arguments\n- `id`: identifier for default parameter set\n# Output\n- `system`: `RandLinConfig` instance\n\"\"\"\nfunction RandLinConfig(id::String)\n    Random.seed!(0)\n\n    if id == \"A\"\n        return RandLinConfig(5, 3)\n    elseif id == \"B\"\n        return RandLinConfig(6, 2)\n    elseif id == \"C\"\n        return RandLinConfig(7, 4)\n    else\n        error(\"Invalid id!\")\n    end\nend","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"</details>","category":"page"},{"location":"Contribution/#Tests","page":"Contribution","title":"Tests","text":"","category":"section"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"To guarantee that all merged code is in a working state, automatic test pipelines have been set up for this repository. The test are run through GitHub Actions, using the Julia Test module. ","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"Every benchmark model has its own /test/<System>Tests.jl file, which is included in /test/runtests.jl. While the goal is to achieve near total code coverage, it is not necessary to 'test everything'. We suggest to at least test the following for a variety of configurations:","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"System matrix sizes,\nSystem transfer functions,\nCorrespondence between 'natural' and port-Hamiltonian system matrices.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"To contribute to the tests, add a file based on the example below at /test/<System>Tests.jl and add a corresponding include statement to /test/runtests.jl.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"<details><summary>Test Example</summary><p>","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"@testset \"RandLin\" begin\n    ids = [\"A\", \"B\", \"C\"]\n\n    for id in ids\n        config = RandLinConfig(id)\n        J, R, G = construct_system(config)\n        sys = PHSystem(config)\n\n        #System matrix sizes\n        @test size(J) == (n_x, n_x)\n        @test size(R) == (n_x, n_x)\n        @test size(G) == (n_x, n_p)\n\n        #Correspondence between \"natural\" and pH form\n        @test sys.E == sparse(1.0I,size(J)...)\n        @test (sys.S, sys.N) .== spzeros(config.n_p, config.n_p)\n        @test (sys.J - sys.R) * sys.Q == J - R\n        @test (sys.G - sys.P) == G\n        @test (sys.G + sys.P)' == G'\n    end\nend","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"</details>","category":"page"},{"location":"Contribution/#Documentation","page":"Contribution","title":"Documentation","text":"","category":"section"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"The documentation for this package is built using Documenter.jl. The /docs/make.jl script uses the Markdown files in /docs/src and the images in /docs/src/assets to build a documentation webpage in /docs/build. Equations are rendered using KaTeX, which is invoked in Markdown by the math environment. The webpage can be built and deployed locally by running the commands below in the Julia REPL:","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"using LiveServer\ninclude(\"/docs/make.jl\")\nserve(dir=\"/docs/build\")","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"Each benchmark system is documented in a separate file, containing the following sections:","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"Description: mathematical description of the model,\nDerivation: detailed description of the conversion from mathematical model to port-Hamiltonian system,\nInterface: section importing the docstrings from the corresponding <System>.jl file,\nReferences: reference section in BibTeX format.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"To contribute to the documentation, add a file based on the example below at /docs/src/<System>.md and add \"<System>.md\" to the \"Benchmark Systems\" list in /docs/make.jl. Please refer to the current \"Benchmark Systems\" pages for stylistic reference.","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"<details><summary>Documentation Example</summary><p>","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"# Random Linear pH-System\n\n## Description\nThis benchmark is a linear port-Hamiltonian system of the form:\n```math\n\\begin{align*}\n    E\\dot{x} &= (J-R)Qx + (G-P)u,\\\\\n    y &= (G+P)^HQx + (S+N)u,\n\\end{align*}\n```\nwhere ``E,Q=I``, ``P,S,N=0`` and ``J,\\ R,\\ G`` are random dense matrices of the correct structure (R positive semi-definite, J, G skew symmetric) with mean 0 and variance 1 [Sabbadini2022](#References).\n\n## Derivation\nThis system is in discrete, port-Hamiltonian form a priori.\n\n## Interface\n```@docs\nRandLinConfig\n```\n```@docs\nRandLinConfig(id::String)\n```\n```@docs\nconstruct_system(config::RandLinConfig)\n```\n\n## References\n```LaTeX\n@article{Sabbadini2022,\n  title = \"On random port-Hamiltonian Systems\",\n  journal = \"We publish anything\"\n}\n```","category":"page"},{"location":"Contribution/","page":"Contribution","title":"Contribution","text":"</details>","category":"page"},{"location":"RclCircuits/#RCL-Ladder-Network","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"","category":"section"},{"location":"RclCircuits/#Description","page":"RCL Ladder Network","title":"Description","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"This benchmark creates linear, time-invariant pH-DAE models for simple electric circuits consisting of ideal voltage sources, resistors, inductors and capacitors. The modelling of such circuits is descibed in Freund2011.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"(Image: Mass-spring-damper chain system)","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"Modeling of such electric circuits with directed graphs leads to systems of the following form:","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"beginaligned\r\nE dotx(t) = (J-R)x(t) + Gu(t) \r\ny(t) = G^mathsfT x(t)\r\nendaligned","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"where","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"beginequation*\r\n\tE = beginbmatrix mathcalA_c C mathcalA_c^mathsfT  0  0  0  L  0  0  0  0 endbmatrix  J = beginbmatrix 0  -mathcalA_l  -mathcalA_v  mathcalA_l^mathsfT  0  0  mathcalA_v^mathsfT  0  0 endbmatrix R = beginbmatrix mathcalA_r R^-1mathcalA_r^mathsfT  0  0  0  0  0  0  0  0 endbmatrix G = beginbmatrix 0  0  -I_m endbmatrix\t\r\nendequation*","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"Here, the matrices RLC are positive definite diagonal matrices that contain the resistances, inductances and capacitances, respectively, as entries. The incidence matrices mathcalA_rmathcalA_lmathcalA_cmathcalA_v follow directly from the directed graph of the network and contain only entries in -101. The inputs u(t) of the system are the voltages v_v(t) provided by the voltage sources and the outputs are the negative currents i_v(t) through the voltage sources. The state vector is given by x(t) = beginbmatrix\tv(t)^mathsfT  i_l(t)^mathsfT  i_v(t)^mathsfT endbmatrix^mathsfT with node voltages v(t) and inductor currents i_l(t). Consequently, the dimension of the model is given by n = 3widetilden + 2m, where widetilden denotes the number of loops in the system and m is the number of voltage sources. Since mathcalA_c C mathcalA_c^mathsfT is diagonal for the circuit in Figure 1, a transformation of the model to semi-explicit form is straightforward. The benchmark allows for different configurations of the network that will change the index of the resulting pH-DAE model and its number of inputs and outputs. ","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"SISO/MIMO: In the multiple-input multiple-output (MIMO) version, the inputs are the voltages of both voltage sources and the outputs are the currents as shown in Figure 1. In the single-input single-output (SISO) configuration, we replace the second voltage source by a wire and only consider the input-to-output behaviour from u_1(cdot) to y_1(cdot).\nIndex 1/Index 2: The differentiation index of the system depends on the electrical component that is placed at the position of the red box in Figure 1. A resistor leads to pH-DAEs with index 1 and a capacitor is used in the index 2 case which leads to improper transfer functions.","category":"page"},{"location":"RclCircuits/#Parameters","page":"RCL Ladder Network","title":"Parameters","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"The topology of the network and its characteristics may be changed via","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"The values for the resistances r, capacitances c and inductances l. If scalars are provided, the value will be applied to all components of the respective type. Parameters can be supplied to each component separately by providing vectors of suitable length.\nThe number widetilden of loops in the network.\nThe number of inputs (voltage sources) m.","category":"page"},{"location":"RclCircuits/#Interface","page":"RCL Ladder Network","title":"Interface","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"To obtain system matrices E J R and G use the following function call.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"using PortHamiltonianBenchmarkSystems\r\nE, J, R, Q, G = setup_DAE1_RCL_LadderNetwork_sparse() # for standard parameters","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"To specify optional arguments, specify the parameters as named arguments.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"using PortHamiltonianBenchmarkSystems\r\nE, J, R, Q, G = setup_DAE1_RCL_LadderNetwork_sparse(ns = 500, r = rand(502))","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"The transfer function can be defined as follows.","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"using LinearAlgebra, PortHamiltonianBenchmarkSystems\r\nE, J, R, G = setup_DAE1_RCL_LadderNetwork_sparse()\r\nH(s) = G'*((s*E-(J-R))\\G)","category":"page"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"setup_DAE1_RCL_LadderNetwork_sparse()\r\nsetup_DAE2_RCL_LadderNetwork_sparse()","category":"page"},{"location":"RclCircuits/#PortHamiltonianBenchmarkSystems.setup_DAE1_RCL_LadderNetwork_sparse-Tuple{}","page":"RCL Ladder Network","title":"PortHamiltonianBenchmarkSystems.setup_DAE1_RCL_LadderNetwork_sparse","text":"Description:   This demo provides a semi-explicit index-1 port-Hamiltonian DAE system   derived from a simple RCL ladder network with shunt resistor\n\nInput Arguments:\n\nns:           Number of loops in network\nr, c, l:      Resistances, capacitances and inductances vectors with length               ns+2 / ns-1 / ns\nm:            Number of inputs (1: SISO or 2: MIMO)\n\nOutput Arguments:\n\nE, J, R, Q, G:      Index-1 PH-DAE model of the RCL ladder network\n\nReferences:   R. W. Freund. Structure-Preserving Model Order Reduction of               RCL Circuit Equations, 2008.\n\nAuthor: Tim Moser   E-Mail: tim.moser@tum.de   Date:   2021/11/03\n\n\n\n\n\n","category":"method"},{"location":"RclCircuits/#PortHamiltonianBenchmarkSystems.setup_DAE2_RCL_LadderNetwork_sparse-Tuple{}","page":"RCL Ladder Network","title":"PortHamiltonianBenchmarkSystems.setup_DAE2_RCL_LadderNetwork_sparse","text":"Index 2 RCL Ladder Network\n\nDescription:   This demo provides a semi-explicit index-2 port-Hamiltonian DAE system   derived from a simple RCL ladder network with buffer capacitor\n\nInput Arguments:\n\nns:           Number of loops in network\nr, c, l:      Resistances, capacitances and inductances vectors with length ns+1 / ns / ns\nm:            Number of inputs (1: SISO or 2: MIMO)\n\nOutput Arguments:\n\nE, J, R, G:      Index-2 PH-DAE model of the RCL ladder network\n\nReferences:   R. W. Freund. Structure-Preserving Model Order Reduction of               RCL Circuit Equations, 2008.\n\nAuthor: Tim Moser   E-Mail: tim.moser@tum.de   Date:   2021/12/14\n\n\n\n\n\n","category":"method"},{"location":"RclCircuits/#References","page":"RCL Ladder Network","title":"References","text":"","category":"section"},{"location":"RclCircuits/","page":"RCL Ladder Network","title":"RCL Ladder Network","text":"@InCollection{Freund2011,\r\n  author    = {Roland W. Freund},\r\n  title     = {The {SPRIM} Algorithm for Structure-Preserving Order Reduction of General {RCL} Circuits},\r\n  booktitle = {Model Reduction for Circuit Simulation},\r\n  series \t= {Lect. Notes Electr. Eng.},\r\n  year      = {2011},\r\n  publisher = {Springer, Dordrecht},\r\n  volume \t= {74},\r\n  chapter \t= {2},\r\n  editor \t= {P. Benner and M. Hinze and E.~J.~W. ter Maten},\r\n  pages \t= {25--52},\r\n}","category":"page"},{"location":"PoroModel/#Poroelastic-Network-Model","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"","category":"section"},{"location":"PoroModel/#Description","page":"Poroelastic Network Model","title":"Description","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"This benchmark is the poroelastic network model presented in  AMU2021. The model is derived from Biot's consolidation model  for poroelastic elasticity. Let Omega subseteq mathbbR^d be a Lipschitz  domain with din23 and mathbbT = 0T for T in (0infty). Consider the system of coupled partial differential equations","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n rho fracpartial^2partial t^2 u(txi) - nabla sigma(u(txi)) + \n nabla (alpha p(txi)) = widehatf(txi) quad textin  (0T times \nOmega  \n fracpartialpartial t left( alpha nablacdot u(txi) + \n frac1M p(txi)right) - nabla cdot left( frackappanunabla \np(txi) right) = widehatg(txi) quad textin  (0T times Omega\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Here, the displacement field u mathbbT times Omega to R and the  pressure field p mathbbT times Omega to R are searched solution  functions. Moreover, the stress-strain constitute relation","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"sigma(u(txi)) = 2muvarepsilon(u(txi)) + \nlambda(nabla cdot u(txi)) mathcalI quad textwith quad \nvarepsilon(u(txi)) = frac12left( nabla u(txi) + (nabla u(txi))^mathsfT \nright)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"is satisfied, where","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"mu and lambda are the Lamé coefficients,\nmathcalI denotes the identity tensor,\nalpha is the Biot-Willes fluid solid coupling coefficient,\nM is the Biot modulus,\nkappa is the permeability,\nrho is the density,\nmu is the fluid viscosity,\nwidehatf (0T times Omega to R^d are the volume-distributed forces,\nwidehatg (0T times Omega to R is the external injection.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The PDE system is equipped with homogeneous Dirichlet boundary conditions","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" u(txi) = 0 quad p(txi) = 0 quad texton \n (0T times partial Omega","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"as well initial conditions p(0cdot) = p^0  partial Omega to R,  u(0cdot) = u^0  partial Omega to R^d, and fracpartialpartial  tu(0cdot) = dotu^0  partial Omega to R^d. Define the Hilbert spaces","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathcalV = leftH_0^1(Omega)right^dquad mathcalH_mathcalV = \nleftL^2(Omega)right^d quad mathcalQ = H_0^1(Omega)quad \nmathcalH_mathcalQ = L^2(Omega)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"and the operators","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\nmathcalY mathcalH_mathcalV to mathcalH_mathcalV^* quad leftlangle mathcalYuv rightrangle = int_Omega rho u \nvmathrmdxi \nmathcalM mathcalH_mathcalQ to mathcalH_mathcalQ^* \nquad leftlangle mathcalMpq rightrangle = int_Omega frac1M \npqmathrmdxi \nmathcalA mathcalV to mathcalV^* \nquad leftlangle mathcalAuv rightrangle = int_Omega \nsigma(u) varepsilon(v)mathrmdxi \nmathcalK mathcalQ to mathcalQ^* \nquad leftlangle mathcalKpq rightrangle = int_Omega \nfrackappanu nabla p cdot nabla qmathrmdxi \nmathcalD mathcalV to mathcalH_mathcalQ^* \nquad leftlangle mathcalDuq rightrangle = int_Omega alpha(nabla \ncdot u)q mathrmdxi\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Note that mathcalY, mathcalM, mathcalA, and mathcalK are  positive definite. To determine the weak form of the PDE, the first equation is  multiplied by a test function v in mathcalV while the second equation is  multiplied with q in mathcalQ. Further we introduce the linear forms","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" f(t) = int_Omega widehatf(t) cdot mathrmd xi in \nmathcalH_mathcalV^* quad \n g(t) = int_Omega widehatg(t) cdot mathrmd xi in \nmathcalH_mathcalQ^*","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Then for initial conditions p^0 in mathcalH_mathcalQ, u^0 in  mathcalV, and dotu^0 in mathcalH_mathcalV and right-hand  sides f in L^2(mathbbTmathcalH_mathcalV) and f in  L^2(mathbbTmathcalH_mathcalQ) one aims to find u in  L^2(mathbbTmathcalV) and p in  L^2(mathbbTmathcalQ) with dotu in  L^2(mathbbTmathcalH_mathcalV), ddotu in  L^2(mathbbTmathcalV^*), and dotp in  L^2(mathbbTmathcalQ^*) such that","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n mathcalY ddotu(t) + mathcalA dotu(t) - mathcalD^* u(t) = f(t) \nquad textin   mathcalV^* \nmathcalD dotu(t) + mathcalM dotp(t) + mathcalK p(t) = g(t) \nquad textin  mathcalQ^*\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"for almost all t in (0T), where mathcalD^* denotes the dual operator  of mathcalD. By introducing the auxiliary variable w = dotu, this  operator equation can be written in first-order form as","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" beginbmatrix\n mathcalY  0  0  0  mathcalA  0  0  0  mathcalM\n endbmatrix beginpmatrix dotw(t)  dotu(t)  dotp(t) \nendpmatrix = \n beginbmatrix\n 0  -mathcalA  mathcalD^*  mathcalA^*  0  0  -mathcalD  0 \n -mathcalK\n endbmatrix beginpmatrix w(t)  u(t)  p(t) endpmatrix + \nbeginpmatrix f(t)  0  g(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Writing the inhomogeneity as","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" beginpmatrix f(t)  0  g(t) endpmatrix = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix \nbeginpmatrix f(t)  g(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"and defining the output","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathbfy(t) = beginpmatrix w(t)  p(t) endpmatrix = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix \nbeginpmatrix w(t)  u(t)  p(t) endpmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"we obtain the port-Hamiltonian system","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n mathcalE dotmathbfx(t) = (mathcalJ - mathcalR) mathbfx(t) + \nmathcalB   mathbfv(t) \n mathbfy(t) = mathcalB^* mathbfx(t)\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"with ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":" mathcalE = beginbmatrix\n mathcalY  0  0  0  mathcalA  0  0  0  mathcalM\n endbmatrix quad mathcalJ = beginbmatrix\n 0  -mathcalA  mathcalD^*  mathcalA^*  0  0  -mathcalD  0 \n 0\n endbmatrix quad mathcalR = beginbmatrix\n 0  0  0  0  0  0  0  0 \n mathcalK\n endbmatrix quad mathcalB = beginbmatrix \noperatornameid  0  0  0  0  operatornameid endbmatrix","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"where mathbfx(t) = leftbeginsmallmatrix w(t)  u(t)  p(t)  endsmallmatrixright and mathbfv(t) = leftbeginsmallmatrix f(t)   g(t) endsmallmatrixright. ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Discretizing this system with standard mathcalP_1 Lagrange finite elements  results in the finite-dimensional port-Hamiltonian system ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n E dotx(t) = (J - R) x(t) + Bv(t) \n         y(t) = B^mathsfT x(t)\nendaligned","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"with ","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"beginaligned\n E = beginbmatrix\n rho M_u  0  0  0  K_u(mulambda)  0  0  0  frac1M M_p\n endbmatrix quad J = beginbmatrix\n 0  -K_u(mulambda)  alpha D^mathsfT  K_u(mulambda)^mathsfT  0  0  \n-alpha D  0  0\n endbmatrix  R = beginbmatrix\n 0  0  0  0  0  0  0  0 \n frackappanu K_p\n endbmatrix quad mathcalB = beginbmatrix B_f  0  0  0  0  \nB_g endbmatrix\nendaligned","category":"page"},{"location":"PoroModel/#Parameters","page":"Poroelastic Network Model","title":"Parameters","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"For this benchmark, the domain Omega = 01^2 with d=2 has been chosen  and the volume-distributed forces widehatf and injection widehatg are  spatially independent resulting in two inputs, i.\\,e., B in R^n times m  with m = 2. Moreover, different discretization levels are available,   resulting in systems with state-space dimensions n=320, n = 980, and n =  1805. These discretizations have been obtained using the python  interface of FEniCS. The following fixed parameters have been chosen:","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"lambda = 12,\nmu = 6.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The following parameters are variable with the default values","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"rho = 10^-3,\nalpha = 079,\nfrac1M = 780cdot 10^3,\nfrackappanu = 63333.","category":"page"},{"location":"PoroModel/#Interface","page":"Poroelastic Network Model","title":"Interface","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The system matrices E J R and B can be generated by the following function call.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = poro_elasticity_model()","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"The free parameters are given as named arguments. Note that n in  320 980 1805 .","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"using PortHamiltonianBenchmarkSystems\nE, J, R, B = poro_elasticity_model(n = 320, eta = 1e-3)\nH(s) = B'*((s*E-(J-R))\\B)","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"Here H is the transfer function.","category":"page"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"poro_elasticity_model","category":"page"},{"location":"PoroModel/#PortHamiltonianBenchmarkSystems.poro_elasticity_model","page":"Poroelastic Network Model","title":"PortHamiltonianBenchmarkSystems.poro_elasticity_model","text":"poro_elasticity_model(; n = 980, rho = 1e-3, alpha = 0.79, M = 1/7.80e3, kappanu = 633.33, eta = 1e-4)\n\nThis function returns a port-Hamiltonian model of linear poroelasticity in a bounded Lipschitz domain as described in     Altmann, Mehrmann, Unger: Port-Hamiltonian Formulations of Poroelastic     Network Models\n\nArguments\n\nn: System dimension (can only be either: 320, 980, or 1805). Default = 980.\nrho: density. Default = 1e-3.\nalpha: Biot-Willis fluid-solid coupling coefficient. Default = 0.79.\nbm: Biot-Modulus. Default = 1/7.8e3.\nkappanu: Quotient kappa/Nu, where kappa denotes the permeability and nu denotes the fluid viscosity. Default = 633.33.\neta: artificial damping coefficient. Default = 1e-4.\n\nOutputs\n\nE J R B, matrices to construct the transfer function H(s) = B^mathsfT(sE-(J-R))^-1B)\n\n\n\n\n\n","category":"function"},{"location":"PoroModel/#References","page":"Poroelastic Network Model","title":"References","text":"","category":"section"},{"location":"PoroModel/","page":"Poroelastic Network Model","title":"Poroelastic Network Model","text":"@misc{AMU2021,\n      title={Port-{H}amiltonian formulations of poroelastic network models}, \n      author={R. Altmann and V. Mehrmann and B. Unger},\n      year={2021},\n      eprint={2012.01949},\n      archivePrefix={arXiv},\n      primaryClass={math.DS}\n}","category":"page"},{"location":"DampedWaveNet/#Damped-Wave-Net","page":"Damped Wave Net","title":"Damped Wave Net","text":"","category":"section"},{"location":"DampedWaveNet/#Description","page":"Damped Wave Net","title":"Description","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"This benchmark is a model for wave propagation in gas pipeline networks, as presented in (EKLSMM2018). The network is modeled as directed, connected graph mathcalG(mathcalVmathcalE), with vertices vinmathcalV, edges einmathcalE and at least one boundary vertex vinmathcalV_bsubseteqmathcalV, connected to a single edge.","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"On each edge, the following 1D damped wave equation holds, with presssure p_e (textkgtextm^-1texts^-2), mass flow m_e (textkgtexts^-1) and pipe constants a_e (texts^2), b_e (textm^-2), d_e (textm^-2texts^-1).","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\ta_epartial_tp_e = -partial_xm_e forall einmathcalE\n\tb_epartial_tm_e = -partial_xp_e-d_em_e forall einmathcalE\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"At each inner vertex vinmathcalV_iequivmathcalVsetminusmathcalV_b, the following pressure continuity and mass conservation conditions hold, where p_i_v is the pressure at v and n_e_v is the direction of edge e at v (+1: incoming, -1: outgoing)","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\tp_e_v equiv p_i_v forall einmathcalE(v) forall vinmathcalV_i\n\tsum_einmathcalE(v) n_e m_e_v = 0 forall vinmathcalV_i\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"At each boundary vertex, either a pressure or mass flow must be fixed (p_u_v m_u_v), leaving the other quantity to be solved for (p_y_v m_y_v):","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\tp_mathcalE(v)_v = p_u_v n_mathcalE(v)m_mathcalE(v)_v = m_y_v forall v inmathcalV_bp\n\tp_mathcalE(v)_v = p_y_v -n_mathcalE(v)m_mathcalE(v)_v = m_u_v forall v inmathcalV_bm\nendalign*","category":"page"},{"location":"DampedWaveNet/#Discretization","page":"Damped Wave Net","title":"Discretization","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"The Galerkin variational form of the damped wave equations can be formulated as shown below, where p_eintextspan(mathcalP_e) mathcalP_e=pi_1dotspi_n and m_eintextspan(mathcalM_e) mathcalM_e=mu_1dotsmu_n. In our implementation mathcalP_e and mathcalM_e are respectively discontinuous element-wise constant and continuous element-wise linear function spaces, but the shown approach holds in general:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\ta_eint_epartial_tp_epi_e mathrmdx = -int_epartial_xm_epi_e mathrmdx forall pi_einmathcalP_e\n\tb_eint_epartial_tm_emu_e mathrmdx = -p_emu_e_partial e + int_ep_epartial_xmu_e mathrmdx -d_eint_em_emu_e mathrmdx forall mu_einmathcalM_e\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"The boundary terms -p_emu_e_partial e are the result of integration by parts and can be grouped by vertex as follows:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n\t-n_e mu_ep_i_v  forall mu_e inmathcalM_equad forall einmathcalE(v)quad forall vinmathcalV_i\n\t-n_mathcalE(v) mu_mathcalE(v)p_u_v forall mu_e inmathcalM_equad forall v inmathcalV_bp\n\t-n_mathcalE(v) mu_mathcalE(v)p_y_v forall mu_e inmathcalM_equad forall v inmathcalV_bm\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"It now becomes apparent that in matrix form, the linear operators in several pairs of terms are each other's (negative) transpose. Hence, we can write our system of equations as the following linear DAE:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n    underbrace\n    beginbmatrix\n        A_pM_p    \n         B_mM_m   \n          0  \n           0\n    endbmatrix_E\n    beginbmatrix\n        dotp\n        dotm\n        dotp_i\n        dotp_y\n    endbmatrix =\n    underbrace\n    beginbmatrix\n         -G_m   \n        G_m^mathsfT -D_mM_m -C_m^mathsfT  U_m^mathsfT\n         C_m  \n         -U_m \n    endbmatrix_A\n    beginbmatrix\n        p\n        m\n        p_i\n        p_y\n    endbmatrix +\n    underbrace\n    beginbmatrix\n        0 \n        Y_m^mathsfT \n         0 \n         I\n    endbmatrix_B\n    beginbmatrix\n        p_u\n        m_u\n    endbmatrix\n    beginbmatrix\n        m_y\n        p_y\n    endbmatrix =\n    underbrace\n    beginbmatrix\n        0  Y_m  \n          0   I\n    endbmatrix_B^mathsfT \n    beginbmatrix\n        p\n        m\n        p_i\n        p_y\n    endbmatrix\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"M_p M_m: mass matrices for p m\nA_p B_m D_m: diagonal matrices containing the edge parameters a_e b_e d_e\nG_m: Galerkin variational operator for partial_xm\nC_m: mass conservation conditions for m\nU_m Y_m: matrices selecting m_u m_y from m","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"Since p contains all the pressure variables, p_i and p_y are redundant in the solution vector. However, they are not explicitly tied to p in the system. It can be proven that the system has a unique solution and that this constrains p_i and p_y to be equal to their counterparts in p, ensuring that the original variational problem is solved (EKLSMM2018).","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"Finally, the system can be written in linear port-Hamiltonian form as follows:","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"beginalign*\n    Edotx = (J-R)Qx + (G-P)u\n    y = (G+P)^mathsfTQx + (S+N)u\nendalign*","category":"page"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"where J = frac12(A-A^mathsfT), R = -frac12(A+A^mathsfT), Q = I, G = B, P = 0, S = N = 0.","category":"page"},{"location":"DampedWaveNet/#Interface","page":"Damped Wave Net","title":"Interface","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"DampedWaveNetConfig","category":"page"},{"location":"DampedWaveNet/#PortHamiltonianBenchmarkSystems.DampedWaveNetConfig","page":"Damped Wave Net","title":"PortHamiltonianBenchmarkSystems.DampedWaveNetConfig","text":"Composite type descibing pressure wave conducting pipe systems, as described in  Egger et al. 'Structure-Preserving Model Reduction for Damped Wave Propagation in Transport Networks'.\n\nArguments\n\nincidence_matrix: Sparse incidence matrix describing the pipe network\nedge_parameters: Named tuple containing vectors a, b, d, l, n, respectively containing the parameters a_e b_e d_e,                    the length and the number of FEM elements for each pipe (ordered as in incidence_matrix)\nboundary_conditions: Vector of chars 'p', 'm', determining the boundary condition type at each boundary                        vertex (ordered as in incidence_matrix)\n\n\n\n\n\n","category":"type"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"DampedWaveNetConfig(id::String)","category":"page"},{"location":"DampedWaveNet/#PortHamiltonianBenchmarkSystems.DampedWaveNetConfig-Tuple{String}","page":"Damped Wave Net","title":"PortHamiltonianBenchmarkSystems.DampedWaveNetConfig","text":"External constructor providing various default instances of DampedWaveNetConfig.\n\nArguments\n\nid: String to identify a default configuration, with possible values: \"pipe\", \"fork\", \"diamond\"\n\n\n\n\n\n","category":"method"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"construct_system(problem::DampedWaveNetConfig)","category":"page"},{"location":"DampedWaveNet/#PortHamiltonianBenchmarkSystems.construct_system-Tuple{DampedWaveNetConfig}","page":"Damped Wave Net","title":"PortHamiltonianBenchmarkSystems.construct_system","text":"Method for constructing the \"natural\" DAE system.\n\nArguments\n\nconfig: DampedWaveNetConfig instance\n\nOutput\n\nsystem: Named tuple containing sparse matrices E, A, B\n\n\n\n\n\n","category":"method"},{"location":"DampedWaveNet/#References","page":"Damped Wave Net","title":"References","text":"","category":"section"},{"location":"DampedWaveNet/","page":"Damped Wave Net","title":"Damped Wave Net","text":"@article{EKLSMM2018,\n  author = {Egger, H. and Kugler, T. and Liljegren-Sailer, B. and Marheineke, N. and Mehrmann, V.},\n  title = {On Structure-Preserving Model Reduction for Damped Wave Propagation in Transport Networks},\n  journal = {SIAM Journal on Scientific Computing},\n  volume = {40},\n  number = {1},\n  pages = {A331-A365},\n  year = {2018},\n  doi = {10.1137/17M1125303},\n  URL = {https://doi.org/10.1137/17M1125303},\n  eprint = {https://doi.org/10.1137/17M1125303}\n}","category":"page"},{"location":"#PortHamiltonianBenchmarkSystems","page":"Home","title":"PortHamiltonianBenchmarkSystems","text":"","category":"section"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PortHamiltonianBenchmarkSystems is a collection of port-Hamiltonian systems, that can be used as benchmarks for simulation, control, and model-order reduction algorithms. We feature constructors for a wide range of linear, nonlinear, ODE, and DAE systems, as well as several default parameter sets for each.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is currently developed in Julia. If you want to take advantage of this benchmark collection in other programming languages, you can:Generate any desired system in Julia and save the matrices in a format of your choosing (see JuliaIO),\nGenerate MAT-files for any default parameter set, using our Command-Line Interface.","category":"page"},{"location":"#Installation-and-Usage","page":"Home","title":"Installation and Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install PortHamiltonianBenchmarkSystems, run the following commands in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/Algopaul/PortHamiltonianBenchmarkSystems.jl/\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To generate one of the systems, e.g. a mass-spring-damper chain with the parameters from Gugercin2012, type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PortHamiltonianBenchmarkSystems\nconfig = SingleMSDConfig(\"Gugercin\")\nJ, R, Q, B = construct_system(config)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Naturally, we may also specify the parameters ourselves:","category":"page"},{"location":"","page":"Home","title":"Home","text":"config = SingleMSDConfig(10, 2, 1.0, 4.0, 5.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need the system matrices in standard port-Hamiltonian form, type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"system = PHSystem(config)\nE, J, R, Q, G, P, S, N = @unpack system","category":"page"},{"location":"","page":"Home","title":"Home","text":"Docstrings for the types and methods shown above can be accessed in the Julia REPL by typing ? and then name of the type or method.","category":"page"},{"location":"#How-to-Contribute","page":"Home","title":"How to Contribute","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This benchmark collection is driven by the active support of the port-Hamiltonian community. If your research has lead to port-Hamiltonian models that may be relevant for this collection, we would be happy to include them. If you wish to contribute to the project directly, please consult our Contribution page, fork our Git repository and issue a pull request. Alternatively, feel free to contact us via e-mail to discuss our potential collaboration. We are happy to receive reference implementations in other languages and reimplement them in Julia for this package.","category":"page"}]
}
